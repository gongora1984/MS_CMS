// <auto-generated />
using System;
using CMSSERVICE.INFRASTRUCTURE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMSSERVICE.INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230222182457_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrCaseSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrCaseSummaryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArrearageCured")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeOder")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ExemptPursuant")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("FinalJdgmntForeClosure")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ObtainedOed")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ObtainedOED");

                    b.Property<string>("Oedentered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("OEDEntered");

                    b.Property<string>("PlanConfirmed")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PropNotListed")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PropPaidDirectly")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PropSurrendered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PropertyProvidedPlan")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ProvidedPursuant")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ResidenceorHomestead")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SurrenderedPursuant")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TrusteeAbandonProp")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ValuedorStripped")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id")
                        .HasName("PKBkrCaseSummary");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRCaseSummaryCaseBKRId");

                    b.ToTable("BkrCaseSummary", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrConditionalOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrConditionalOrderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AttysFeesAndCosts")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MnthlyPymntAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextPymntDt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PaymentsDueAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PaymentsDueFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentsDueTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PaymentsDueTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalDelinquency")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalDueDiv6Months")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PKBkrConditionalOrder");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRConditionalOrderCaseBKRId");

                    b.ToTable("BkrConditionalOrder", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrDistrictId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientBkcourtJurisdiction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientBKCourtJurisdiction");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ListOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKBkrDistrict");

                    b.ToTable("BkrDistrict", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BKRFinInstallmentsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountofInstallments")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateofInstallment")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberofInstallments")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalInstallmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PKBkrFinInstallment");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRFinInstallmentCaseBKRId");

                    b.ToTable("BkrFinInstallment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinInterestRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrFinInterestRateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("IrfromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("IRFromDate");

                    b.Property<decimal?>("Irtotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("IRTotal");

                    b.Property<bool?>("IsFixedRate")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVariableRate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IttoDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ITToDate");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKBkrFinInterestRate");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRFinInterestRateCaseBKRId");

                    b.ToTable("BkrFinInterestRate", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinMissedPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrFinMissedPaymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Mpescrow")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MPEscrow");

                    b.Property<DateTime?>("MpfromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MPFromDate");

                    b.Property<int?>("MpnumberOfMissedPayments")
                        .HasColumnType("int")
                        .HasColumnName("MPNumberOfMissedPayments");

                    b.Property<decimal?>("MppandI")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MPPandI");

                    b.Property<DateTime?>("MptoDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MPToDate");

                    b.Property<decimal?>("Mptotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MPTotal");

                    b.HasKey("Id")
                        .HasName("PKBkrFinMissedPayment");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRFinMissedPaymentCaseBKRId");

                    b.ToTable("BkrFinMissedPayment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinOtherCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BKROtherCostId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionNeededNote")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<bool>("ClientApproved")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<int>("CostDecriptionLid")
                        .HasColumnType("int");

                    b.Property<string>("CostName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateIncurred")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool>("Lpapproved")
                        .HasColumnType("bit")
                        .HasColumnName("LPApproved");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SupportDocumentRepositoryId")
                        .HasColumnType("int");

                    b.Property<int?>("WriteOffBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WriteOffDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WriteOffNote")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id")
                        .HasName("PKBkrFinOtherCost");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRFinOtherCostCaseBKRId");

                    b.HasIndex(new[] { "CostDecriptionLid" }, "FKBKRFinOtherCostCostDecriptionLid");

                    b.ToTable("BkrFinOtherCost", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrFinancialId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("InsuranceAdvances")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("LastBreakDownReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastBreakDownRequest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMonetaryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumInstallmentsDue")
                        .HasColumnType("int");

                    b.Property<decimal?>("OtherFees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostAppraisalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostAtTimeOfBkyfiling")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PostAtTimeOfBKYFiling");

                    b.Property<decimal?>("PostAttyFeeBilled")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostCurrentPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostFilingFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostForcedInsurance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostInspectionfees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PostTotalAttyFees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PosttotalPetitionAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PreCountyPropertyAppraisal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PreForcedInsurance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PreMonthlyPymntAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PreNextPymntDue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PrePayOffAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PrePayOffDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PrePetitionRefund")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PrePetitionUnappliedFunds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PreTotalAttyfees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PreTotalPetitionAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("UnappliedFunds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("UnpaidPrincipal")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PKBkrFinancial");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRFinancialCaseBKRId");

                    b.ToTable("BkrFinancial", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BKRJourneyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JournalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherKey")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKBkrJournal");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRJournalCaseBKRId");

                    b.ToTable("BkrJournal", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrLoanModification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrLoanModificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MaturityDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ModifiedInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NewUnpaidPrincipalBal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PrincipalAndInterest")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PKBkrLoanModification");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRLoanModificationCaseBKRId");

                    b.ToTable("BkrLoanModification", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrMfr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BkrMfrId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apoentered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("APOEntered");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalJudgment")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotionGranted")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("NegativeNotice")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ReliefByPlan")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("StatementOfIntention")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TermsOfApo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TermsOfAPO");

                    b.HasKey("Id")
                        .HasName("PKBkrMfr");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRMFRCaseBKRId");

                    b.ToTable("BkrMfr", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrPaymentChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BKRPaymentChangeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentEscrowPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CurrentInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CurrentMrtgPmnt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CurrentPrincipalAndInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NewEscrowPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NewInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NewMrtgPmnt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NewPrincipalAndInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NewTotalPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PKBkrPaymentChange");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRPaymentChangeCaseBKRId");

                    b.ToTable("BkrPaymentChange", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BKRPropertyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("BkyClientPaymentAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("BkyClientPaymentAddress2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("BkyClientPaymentCity")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("BkyClientPaymentEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BkyClientPaymentPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BkyClientPaymentState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("BkyClientPaymentZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BkycourtAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("BKYCourtAddress1");

                    b.Property<string>("BkycourtAddress2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("BKYCourtAddress2");

                    b.Property<string>("BkycourtCity")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("BKYCourtCity");

                    b.Property<string>("BkycourtEmail")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("BKYCourtEmail");

                    b.Property<string>("BkycourtPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BKYCourtPhone");

                    b.Property<string>("BkycourtState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("BKYCourtState");

                    b.Property<string>("BkycourtZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("BKYCourtZip");

                    b.Property<int>("CaseBkrId")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRId");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKBkrProperty");

                    b.HasIndex(new[] { "CaseBkrId" }, "FKBKRPropertyCaseBKRId");

                    b.ToTable("BkrProperty", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseAuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseAutoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedCsrlid")
                        .HasColumnType("int")
                        .HasColumnName("AssignedCSRLid");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CaseAutoStatusLid")
                        .HasColumnType("int");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedReasonLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GuaranteedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InternalStockRefNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LpreferenceId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LPReferenceId");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<decimal?>("MmrestimatedValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MMREstimatedValue");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("RetailValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TitleTransferDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("VehicleMake")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleModel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("VehicleStatusLid")
                        .HasColumnType("int");

                    b.Property<string>("VehicleTrim")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleVinNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PKCaseAuto");

                    b.HasIndex(new[] { "AssignedCsrlid" }, "FKCaseAutoAssignedCSRLid");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseAutoClientJobId");

                    b.HasIndex(new[] { "ClosedReasonLid" }, "FKCaseAutoClosedReasonLid");

                    b.HasIndex(new[] { "CaseAutoStatusLid" }, "FKCaseAutoStatusLid");

                    b.HasIndex(new[] { "VehicleStatusLid" }, "FKCaseAutoVehicleStatusLid");

                    b.ToTable("CaseAuto", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseAutoBuyerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseAutoBuyerInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltPhoneNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("AssignedAgentLid")
                        .HasColumnType("int")
                        .HasColumnName("AssignedAgentLID");

                    b.Property<int?>("BackgroundCheckLid")
                        .HasColumnType("int")
                        .HasColumnName("BackgroundCheckLID");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("BuyingActionLid")
                        .HasColumnType("int")
                        .HasColumnName("BuyingActionLID");

                    b.Property<int?>("BuyingStatusLid")
                        .HasColumnType("int")
                        .HasColumnName("BuyingStatusLID");

                    b.Property<int>("CaseAutoId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedOn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DlexpiryDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("DLExpiryDate")
                        .IsFixedLength();

                    b.Property<int?>("DriverLicenseDocRepId")
                        .HasColumnType("int")
                        .HasColumnName("DriverLicenseDocRepID");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FollowUpComment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FollowUpDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool?>("IsAgentNotified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OnlinePlacementLid")
                        .HasColumnType("int")
                        .HasColumnName("OnlinePlacementLID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TestDriveDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("TestDriveResultsLid")
                        .HasColumnType("int")
                        .HasColumnName("TestDriveResultsLID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedOn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PKCaseAutoBuyerInfo");

                    b.HasIndex(new[] { "CaseAutoId" }, "FKCaseAutoBuyerInfoCaseAutoId");

                    b.ToTable("CaseAutoBuyerInfo", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseBkr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseBkrId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApocfiledDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("APOCFiledDate");

                    b.Property<DateTime?>("AttyAssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttyAssignedTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("BarDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BkrSolLid")
                        .HasColumnType("int")
                        .HasColumnName("BKRSOLLid");

                    b.Property<string>("BkrcaseNumber")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("BKRCaseNumber");

                    b.Property<int?>("BkrcircuitLid")
                        .HasColumnType("int")
                        .HasColumnName("BKRCircuitLid");

                    b.Property<int?>("BkrdistrictId")
                        .HasColumnType("int")
                        .HasColumnName("BKRDistrictId");

                    b.Property<string>("BkrinvestorNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BKRInvestorNumber");

                    b.Property<string>("BkrloanNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BKRLoanNumber");

                    b.Property<DateTime>("BkropenDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BKROpenDate");

                    b.Property<DateTime?>("BkypocbarDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BKYPOCBarDate");

                    b.Property<int?>("CaseBkrclientInvestorLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRClientInvestorLid");

                    b.Property<int?>("CaseBkrclientInvestorTypeLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRClientInvestorTypeLid");

                    b.Property<int>("CaseBkrstatusLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRStatusLid");

                    b.Property<int>("CaseBkrtypeLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseBKRTypeLid");

                    b.Property<DateTime?>("CfmhearingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CFMHearingDate");

                    b.Property<DateTime?>("ChargeOffDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<string>("ClientReferranceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedReasonLid")
                        .HasColumnType("int");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int")
                        .HasColumnName("CountyID");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerFullName1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerFullName2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Debtor1Addr1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Debtor1Addr2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Debtor1City")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Debtor1Email")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Debtor1Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Debtor1Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Debtor1State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Debtor1Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Debtor2Addr1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Debtor2Addr2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Debtor2City")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Debtor2Email")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Debtor2Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Debtor2Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Debtor2State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Debtor2Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DefaultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefendantCap")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Ecfapocid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ECFAPOCID");

                    b.Property<string>("Ecfpocid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ECFPOCID");

                    b.Property<DateTime>("FiledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LitigationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LpreferanceId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LPReferanceId");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaintiffCap")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("PocfiledDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("POCFiledDate");

                    b.Property<decimal?>("PrincipalBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PropertyAddr1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropertyAddr2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropertyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PropertyState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PropertyZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("SocfiledDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SOCFiledDate");

                    b.Property<DateTime?>("Soldate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SOLDate");

                    b.Property<string>("TrusteeAddr1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("TrusteeAddr2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("TrusteeCity")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("TrusteeEmail")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("TrusteeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrusteePhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TrusteeState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("TrusteeZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("WocfiledDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("WOCFiledDate");

                    b.HasKey("Id")
                        .HasName("PKCaseBkr");

                    b.HasIndex(new[] { "BkrSolLid" }, "FKBKRSOLLid");

                    b.HasIndex(new[] { "BkrdistrictId" }, "FKCaseBKRBKRDistrictId");

                    b.HasIndex(new[] { "CaseBkrclientInvestorLid" }, "FKCaseBKRClientInvestorLid");

                    b.HasIndex(new[] { "CaseBkrclientInvestorTypeLid" }, "FKCaseBKRClientInvestorTypeLid");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseBKRClientJobId");

                    b.HasIndex(new[] { "CaseBkrstatusLid" }, "FKCaseBKRStatusLid");

                    b.HasIndex(new[] { "CaseBkrtypeLid" }, "FKCaseBKRTypeLid");

                    b.HasIndex(new[] { "BkrcircuitLid" }, "FKCircuitLid");

                    b.HasIndex(new[] { "ClosedReasonLid" }, "FKClosedReasonLid");

                    b.ToTable("CaseBkr", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseColId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BeginingPrincipal")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<int?>("CaseColcloseReasonLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseCOLCloseReasonLid");

                    b.Property<int?>("CaseColstatusLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseCOLStatusLid");

                    b.Property<string>("ClaimTypeDescription")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ClientAttyName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ClientCaseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CourtCaseNumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DefaultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefendantCap")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)");

                    b.Property<DateTime?>("FiledDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<string>("InvestorTypeDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("JudgmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastAssignmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LastPaymentAmount")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaintiffCap")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("PropertyAddress1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PropertyAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PropertyCity")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropertyState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PropertyZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Referance")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("Soldate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SOLDate");

                    b.HasKey("Id")
                        .HasName("PKCaseCol");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseCOLClientJobId");

                    b.HasIndex(new[] { "CaseColcloseReasonLid" }, "FKCaseCOLCloseReasonLid");

                    b.HasIndex(new[] { "LastAssignmentId" }, "FKCaseCOLLastAssignmentId");

                    b.HasIndex(new[] { "NextAssignmentId" }, "FKCaseCOLNextAssignmentId");

                    b.HasIndex(new[] { "CaseColstatusLid" }, "FKCaseCOLStatusLid");

                    b.ToTable("CaseCol", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseColDefendantBankInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseColDefendantBankInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("AccountNumberLast4")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("AccountTypeLid")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeLId");

                    b.Property<string>("Bank")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastVerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOnAccount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RountingNumber")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PKCaseColDefendantBankInfo");

                    b.HasIndex(new[] { "AccountTypeLid" }, "FKCaseCOLDefendantBankInfoAccountTypeLId");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKCaseCOLDefendantBankInfoCaseJobDefendantId");

                    b.ToTable("CaseColDefendantBankInfo", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseColDefendantCardInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseColDefendantCardInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountTypeLid")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeLId");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<string>("Ccaddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CCAddress");

                    b.Property<string>("Cccity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCity");

                    b.Property<string>("Cccvv")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CCcvv");

                    b.Property<string>("CcexpirationMm")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CCExpirationMM");

                    b.Property<string>("CcexpirationYy")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CCExpirationYY");

                    b.Property<string>("Ccname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CCName");

                    b.Property<string>("Ccnumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CCNumber");

                    b.Property<string>("CcnumberLast4")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("CCNumberLast4");

                    b.Property<string>("Ccstate")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CCState");

                    b.Property<string>("Cctype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCType");

                    b.Property<string>("CczipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CCZipCode");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastVerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOnAccount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PKCaseColDefendantCardInfo");

                    b.HasIndex(new[] { "AccountTypeLid" }, "FKCaseCOLDefendantCardInfoAccountTypeLId");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKCaseCOLDefendantCardInfoCaseJobDefendantId");

                    b.ToTable("CaseColDefendantCardInfo", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseColTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseColTransactionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AppCost")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("appCost");

                    b.Property<decimal>("AppFees")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("appFees");

                    b.Property<decimal>("AppInterest")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("appInterest");

                    b.Property<decimal>("AppOther")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("appOther");

                    b.Property<decimal>("AppPrince")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("appPrince");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<int>("CaseColid")
                        .HasColumnType("int")
                        .HasColumnName("CaseCOLId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaidbyDefendantId")
                        .HasColumnType("int");

                    b.Property<bool?>("Tally")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TallyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id")
                        .HasName("PKCaseColTransaction");

                    b.HasIndex(new[] { "CaseColid" }, "FKCaseCOLTransactionCaseCOLId");

                    b.ToTable("CaseColTransaction", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseCommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CommentTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseComment");

                    b.HasIndex(new[] { "CaseId" }, "FKCaseCommentCaseId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseCommentClientJobId");

                    b.HasIndex(new[] { "CommentTypeLid" }, "FKCaseCommentCommentTypeLid");

                    b.ToTable("CaseComment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCommentWhiteboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseCommentWhiteboardId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CommentTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseCommentWhiteboard");

                    b.HasIndex(new[] { "CaseId" }, "FKCaseCommentWhiteboardCaseId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseCommentWhiteboardClientJobId");

                    b.HasIndex(new[] { "CommentTypeLid" }, "FKCaseCommentWhiteboardCommentTypeLid");

                    b.ToTable("CaseCommentWhiteboard", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCounty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseCountyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseStateId")
                        .HasColumnType("int");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseCounty");

                    b.HasIndex(new[] { "CaseStateId" }, "FKCaseCountyCaseStateId");

                    b.ToTable("CaseCounty", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseCourtId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CaseCountyId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseDistrictId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ClerkContact")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CountOfficalName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CourtCurcit")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CourtName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CourtNotes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CourtTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PstcurcitCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PSTCurcitCode");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKCaseCourt");

                    b.HasIndex(new[] { "CaseCountyId" }, "FKCaseCourtCaseCountyId");

                    b.HasIndex(new[] { "CaseDistrictId" }, "FKCaseCourtCaseDistrictId");

                    b.HasIndex(new[] { "CourtTypeLid" }, "FKCaseCourtCourtType");

                    b.ToTable("CaseCourt", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseDistrictId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseDistrict");

                    b.HasIndex(new[] { "CaseStateId" }, "FKCaseDistrictCaseStateId");

                    b.ToTable("CaseDistrict", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseEviction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseEvictionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualVacateDt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CaseCountyId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseDistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseJudgeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CfkfallthroughDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CFKFallthroughDt");

                    b.Property<DateTime?>("CfkofferDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CFKOfferDt");

                    b.Property<int?>("CircuitLid")
                        .HasColumnType("int");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseAndBillDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedReasonLid")
                        .HasColumnType("int");

                    b.Property<string>("CourtCaseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefendantCap")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("DivisionLid")
                        .HasColumnType("int");

                    b.Property<string>("Evcattorney")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EVCAttorney");

                    b.Property<DateTime?>("EvcreffRcvdAttrDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EVCReffRcvdAttrDt");

                    b.Property<DateTime?>("EvictionOpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvictionStatusLid")
                        .HasColumnType("int");

                    b.Property<int>("EvictionTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedAmt")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("ExpectedVacateDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("FirstLegalActionDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LockoutCmptDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OptionLetterSentDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OridDefendant")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("OrigPlaintiff")
                        .HasMaxLength(1550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1550)");

                    b.Property<string>("PlaintiffCap")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("PropAddr1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropAddr2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PropState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PropZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("TenentLeaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenentLeaseDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WritPossesionEntrdDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WritPossesionPostedDt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseEviction");

                    b.HasIndex(new[] { "CaseCountyId" }, "FKCaseEvictionCaseCountyId");

                    b.HasIndex(new[] { "CaseDistrictId" }, "FKCaseEvictionCaseDistrictId");

                    b.HasIndex(new[] { "CaseJudgeId" }, "FKCaseEvictionCaseJudgeId");

                    b.HasIndex(new[] { "CircuitLid" }, "FKCaseEvictionCircuitLid");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseEvictionClientJobId");

                    b.HasIndex(new[] { "ClosedReasonLid" }, "FKCaseEvictionClosedReasonLid");

                    b.HasIndex(new[] { "DivisionLid" }, "FKCaseEvictionDivisionLid");

                    b.HasIndex(new[] { "EvictionStatusLid" }, "FKCaseEvictionEvictionStatusLid");

                    b.HasIndex(new[] { "EvictionTypeLid" }, "FKCaseEvictionEvictionTypeLid");

                    b.ToTable("CaseEviction", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseEvictionJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseEvictionJournalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int>("CaseEvictionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JournalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherKey")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseEvictionJournal");

                    b.HasIndex(new[] { "CaseEvictionId" }, "FKCaseEvictionJournalCaseEvictionId");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKCaseEvictionJournalLoginDetailId");

                    b.ToTable("CaseEvictionJournal", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseFcl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseFclId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttorneyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("CaseFclcaseTypeLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLCaseTypeLid");

                    b.Property<int?>("CaseFclclientInvestorTypeLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLClientInvestorTypeLid");

                    b.Property<DateTime?>("CaseFclclosedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CaseFCLClosedDate");

                    b.Property<int?>("CaseFclclosedReasonLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLClosedReasonLid");

                    b.Property<int?>("CaseFclpropertyTypeLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLPropertyTypeLid");

                    b.Property<int>("CaseFclstatusLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLStatusLid");

                    b.Property<DateTime?>("CaseFiledDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CaseJudgeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<int?>("CountyFiled")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeedInfoFinalVestingInfo")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("DeedInfoRecordingBookNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DeedInfoRecordingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeedInfoRecordingInstrumentNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DeedInfoRecordingPageNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("FclballanceAtDefault")
                        .HasColumnType("money")
                        .HasColumnName("FCLBallanceAtDefault");

                    b.Property<string>("FclclientReferanceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FCLClientReferanceNumber");

                    b.Property<string>("FclcourtCaseNumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FCLCourtCaseNumber");

                    b.Property<decimal?>("FclcurrentBallance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("FCLCurrentBallance")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FclfullDefendant")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("FCLFullDefendant");

                    b.Property<string>("FclfullPlaintiff")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("FCLFullPlaintiff");

                    b.Property<string>("FclhomePhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FCLHomePhoneNumber");

                    b.Property<bool?>("FclintrestIsAdjustable")
                        .HasColumnType("bit")
                        .HasColumnName("FCLIntrestIsAdjustable");

                    b.Property<decimal?>("FclintrestRate")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("FCLIntrestRate");

                    b.Property<string>("FclloanNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FCLLoanNumber");

                    b.Property<decimal?>("FclmonthlyPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("FCLMonthlyPayment")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("FclmortgageAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("FCLMortgageAmount")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("FclmortgageDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FCLMortgageDate");

                    b.Property<DateTime?>("FclmortgageDefaultDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FCLMortgageDefaultDate");

                    b.Property<DateTime>("FclopenDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FCLOpenDate");

                    b.Property<string>("FcloridMortgagor")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("FCLOridMortgagor");

                    b.Property<DateTime?>("FclreferralRecievedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FCLReferralRecievedDate");

                    b.Property<string>("IndexNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InversterLoanNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsReferred")
                        .HasColumnType("bit")
                        .HasColumnName("isReferred");

                    b.Property<string>("MobileHomeHudconstruction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MobileHomeHUDConstruction");

                    b.Property<string>("MobileHomeHudconstructionCodeLabels")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("MobileHomeHUDConstructionCodeLabels");

                    b.Property<string>("MobileHomeManufacturedYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileHomeRealEstateTaxId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MobileHomeRealEstateTaxID");

                    b.Property<string>("MobileHomeSerialVinnumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MobileHomeSerialVINNumber");

                    b.Property<string>("MobileHomeTradeModelName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MortgageReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("OccStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrimaryBorrowerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PropertyAddress1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PropertyAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PropertyCity")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropertyMortgagee")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PropertyMortgagor")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PropertyOwner")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PropertyState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PropertyZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RecordedBook")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecordedInst")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordedPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReferralNote")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("ReferredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Soldate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SOLDate");

                    b.Property<int?>("StateFiled")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKCaseFcl");

                    b.HasIndex(new[] { "CaseJudgeId" }, "FKCaseFCLCaseJudgeId");

                    b.HasIndex(new[] { "CaseFclcaseTypeLid" }, "FKCaseFCLCaseTypeLid");

                    b.HasIndex(new[] { "CaseFclclientInvestorTypeLid" }, "FKCaseFCLClientInvestorTypeLid");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseFCLClientJobId");

                    b.HasIndex(new[] { "CaseFclclosedReasonLid" }, "FKCaseFCLClosedReasonLid");

                    b.HasIndex(new[] { "CountyFiled" }, "FKCaseFCLCountyFiled");

                    b.HasIndex(new[] { "CaseFclpropertyTypeLid" }, "FKCaseFCLPropertyTypeLid");

                    b.HasIndex(new[] { "StateFiled" }, "FKCaseFCLStateFiled");

                    b.HasIndex(new[] { "CaseFclstatusLid" }, "FKCaseFCLStatusLid");

                    b.ToTable("CaseFcl", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJobDefendantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("AddressVacant")
                        .HasColumnType("bit");

                    b.Property<int>("AttemptNum")
                        .HasColumnType("int");

                    b.Property<string>("BusinessPhoneNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CaseJobDefendantAttyId")
                        .HasColumnType("int");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentWorkFlowId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefendantAlius")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("DefendantDob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DefendantDOB");

                    b.Property<DateTime?>("DefendantDod")
                        .HasColumnType("datetime2")
                        .HasColumnName("DefendantDOD");

                    b.Property<string>("DefendantName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DefendantSsn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DefendantSSN");

                    b.Property<string>("DefendantSsn4")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("DefendantSSN4");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("HasAlternateAddress")
                        .HasColumnType("bit");

                    b.Property<string>("IntegrationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IntegrationId3")
                        .HasColumnType("int");

                    b.Property<bool?>("IsInternationalAddress")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("PacerDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PacerSearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PacerSearchResults")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PartyTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("PartyTypeName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RequestorOrganizationLid")
                        .HasColumnType("int");

                    b.Property<bool?>("SameasPropertyAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ServiceAddress1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ServiceAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ServiceCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceState")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("ServiceTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("ServiceZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("StopMailToDefendant")
                        .HasColumnType("bit");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKCaseJobDefendant");

                    b.HasIndex(new[] { "CaseJobDefendantAttyId" }, "FKCaseJobDefendantAttyId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseJobDefendantClientJobId");

                    b.HasIndex(new[] { "PacerDocumentId" }, "FKCaseJobDefendantPacerDocumentId");

                    b.HasIndex(new[] { "PartyTypeLid" }, "FKCaseJobDefendantPartyTypeLid");

                    b.HasIndex(new[] { "RequestorOrganizationLid" }, "FKCaseJobDefendantRequestorOrganizationLid");

                    b.HasIndex(new[] { "ServiceTypeLid" }, "FKCaseJobDefendantServiceTypeLid");

                    b.ToTable("CaseJobDefendant", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantAdditionalAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJobDefendantAdditionalAddressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateId")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PKCaseJobDefendantAdditionalAddress");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKCaseJobDefendantAdditionalAddressCaseJobDefendantId");

                    b.ToTable("CaseJobDefendantAdditionalAddress", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantAtty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJobDefendantAttyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AttorneyName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("AttyBarNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BusPhoneNum")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmailAddress2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LawPracticeName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("LoginDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("LoginDetailsID");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKCaseJobDefendantAtty");

                    b.ToTable("CaseJobDefendantAtty", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantByVirtueOf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJobDefendantByVirtueOfId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Book")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("ByVirtueOfLid")
                        .HasColumnType("int");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instrument")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseJobDefendantByVirtueOf");

                    b.HasIndex(new[] { "ByVirtueOfLid" }, "FKCaseJobDefendantByVirtueOfByVirtueOfLid");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKCaseJobDefendantByVirtueOfCaseJobDefendantId");

                    b.ToTable("CaseJobDefendantByVirtueOf", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantSearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJobDefendantSearchHistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CameFrom")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("CameFromAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<int>("CaseJobDefendantSearchTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseReceived")
                        .HasColumnType("xml");

                    b.Property<DateTime?>("ResponseReceivedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SendOutRequest")
                        .HasColumnType("xml");

                    b.Property<DateTime>("SentOutDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PKCaseJobDefendantSearchHistory");

                    b.HasIndex(new[] { "CameFromAssignmentId" }, "FKCaseJobDefendantSearchHistoryCameFromAssignmentId");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKCaseJobDefendantSearchHistoryCaseJobDefendantId");

                    b.HasIndex(new[] { "CaseJobDefendantSearchTypeLid" }, "FKCaseJobDefendantSearchHistoryCaseJobDefendantSearchTypeLid");

                    b.ToTable("CaseJobDefendantSearchHistory", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJobDefendantServiceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AddressVacant")
                        .HasColumnType("bit");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentWorkFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("DefendantAlius")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DefendantName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DefendantWorkFlowKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMobileHome")
                        .HasColumnType("bit")
                        .HasColumnName("isMobileHome");

                    b.Property<bool?>("IsMultiPlex")
                        .HasColumnType("bit")
                        .HasColumnName("isMultiPlex");

                    b.Property<int>("LpdefendantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LPDefendantId")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("Lpkey1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LPKey1");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("ServiceAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime?>("ServiceAnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ServiceComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ServiceDefaultDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ServiceNotAble")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ServiceReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceStatusLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ServiceTta")
                        .HasColumnType("datetime2")
                        .HasColumnName("ServiceTTA");

                    b.Property<int>("ServiceTypeLid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKCaseJobDefendantService");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKCaseJobDefendantServiceCaseJobDefendantId");

                    b.HasIndex(new[] { "ClientAssignmentId" }, "FKCaseJobDefendantServiceClientAssignmentId");

                    b.HasIndex(new[] { "DocumentTypeId" }, "FKCaseJobDefendantServiceDocumentTypeId");

                    b.HasIndex(new[] { "ServiceStatusLid" }, "FKCaseJobDefendantServiceServiceStatusLid");

                    b.HasIndex(new[] { "ServiceTypeLid" }, "FKCaseJobDefendantServiceServiceTypeLid");

                    b.ToTable("CaseJobDefendantService", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJudge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJudgeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CaseCourtId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("JudgeCourtName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("JudgeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Room")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpeacialInstructions1")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKCaseJudge");

                    b.HasIndex(new[] { "CaseCourtId" }, "FKCaseJudgeCaseCourtId");

                    b.ToTable("CaseJudge", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseCountyId")
                        .HasColumnType("int");

                    b.Property<string>("CaseReferance")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientInternalRef")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ClientReferance")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobRecipientName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientAdd1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RecipientAdd2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RecipientCity")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RecipientState")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RecipientZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKCaseMaster");

                    b.HasIndex(new[] { "ClientId" }, "FKCaseClientId");

                    b.HasIndex(new[] { "CaseCountyId" }, "FKCaseMasterCaseCountyId");

                    b.ToTable("CaseMaster", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseReplevin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseReplevinId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Aitno")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("AITNO");

                    b.Property<int?>("AssignedAtty")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedLocalCounsel")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedPara")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedRep")
                        .HasColumnType("int");

                    b.Property<string>("BillingMatterNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CaseReplevinStatusLid")
                        .HasColumnType("int");

                    b.Property<int>("CaseReplevinTypeLid")
                        .HasColumnType("int");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedReasonLid")
                        .HasColumnType("int");

                    b.Property<string>("CoDebtorLocation")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CoDebtorName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("CountyFiledId")
                        .HasColumnType("int");

                    b.Property<string>("CourtCaseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLender")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DaysDeliquentofLoan")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DebtorAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DebtorAddress2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DebtorCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DebtorCountyId")
                        .HasColumnType("int");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DebtorZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DefaultDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultReasonLid")
                        .HasColumnType("int");

                    b.Property<string>("DefendantCaption")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("EstimatedCollateralDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("EstimatedCollateralValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InvestorLoanNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InvestorName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("InvestorTypeLid")
                        .HasColumnType("int");

                    b.Property<decimal?>("JudgmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("JudgmentBook")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("JudgmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JudgmentPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LoanNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocalCounselRefId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LpreferanceId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LPReferanceId");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MonthlyPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("OccupancyStatusLid")
                        .HasColumnType("int");

                    b.Property<string>("OriginalLender")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PlaintiffCaption")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PropAddr1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PropAddr2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PropCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PropState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PropZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RateofInterest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("ReplevinOpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateFiled")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxesDue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TitleCompany")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("TotalAmountDue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Upb")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UPB");

                    b.Property<string>("VehicleMake")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleModel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("VehicleValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("VehicleYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VinNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WhoSignedtheNote")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PKCaseReplevin");

                    b.HasIndex(new[] { "AssignedAtty" }, "FKCaseReplevinAssignedAtty");

                    b.HasIndex(new[] { "AssignedLocalCounsel" }, "FKCaseReplevinAssignedLocalCounsel");

                    b.HasIndex(new[] { "AssignedPara" }, "FKCaseReplevinAssignedPara");

                    b.HasIndex(new[] { "AssignedRep" }, "FKCaseReplevinAssignedRep");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseReplevinClientJobId");

                    b.HasIndex(new[] { "ClosedReasonLid" }, "FKCaseReplevinClosedReasonLid");

                    b.HasIndex(new[] { "CountyFiledId" }, "FKCaseReplevinCountyFiledId");

                    b.HasIndex(new[] { "DebtorCountyId" }, "FKCaseReplevinDebtorCountyId");

                    b.HasIndex(new[] { "DefaultReasonLid" }, "FKCaseReplevinDefaultReasonLid");

                    b.HasIndex(new[] { "DivisionId" }, "FKCaseReplevinDivisionId");

                    b.HasIndex(new[] { "InvestorTypeLid" }, "FKCaseReplevinInvestorTypeLid");

                    b.HasIndex(new[] { "OccupancyStatusLid" }, "FKCaseReplevinOccupancyStatusLid");

                    b.HasIndex(new[] { "StateFiled" }, "FKCaseReplevinStateFiled");

                    b.HasIndex(new[] { "CaseReplevinStatusLid" }, "FKCaseReplevinStatusLid");

                    b.HasIndex(new[] { "CaseReplevinTypeLid" }, "FKCaseReplevinTypeLid");

                    b.ToTable("CaseReplevin", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseSaleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("BidAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("BidAssign")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("BidAssignAddr")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("BidAssignCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BidAssignState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("BidAssignZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("BidAssignedToId")
                        .HasColumnType("int")
                        .HasColumnName("BidAssignedToID");

                    b.Property<string>("Bidder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CancelReasonLid")
                        .HasColumnType("int");

                    b.Property<int>("CaseFclid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLId");

                    b.Property<int>("CaseSaleStatusLid")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntDays")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IntegrationId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IntegrationId3")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerDiem")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<decimal?>("PostSales3rdFunds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PostSales3rdFundsRec")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostSalesAmndCtrecorded")
                        .HasColumnType("date")
                        .HasColumnName("PostSalesAmndCTRecorded");

                    b.Property<DateTime?>("PostSalesCertofSales")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostSalesCertofTitle")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostSalesCtrecorded")
                        .HasColumnType("date")
                        .HasColumnName("PostSalesCTRecorded");

                    b.Property<DateTime?>("PostSalesObjection")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PreSaleDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PreSalePubRunDate1")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PreSalePubRunDate2")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PreSaleReqBidInst")
                        .HasColumnType("date");

                    b.Property<string>("RescheduleDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("RescheduleReasonLid")
                        .HasColumnType("int");

                    b.Property<decimal?>("SaleAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SaleDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("SaleHeldBidAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SaleHeldBidInst")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SaleHeldBidder")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("SaleHeldDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("SuppJudgRecov")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalCosts")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TotalInterestDue")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseSale");

                    b.HasIndex(new[] { "CancelReasonLid" }, "FKCaseSaleCancelReasonLid");

                    b.HasIndex(new[] { "RescheduleReasonLid" }, "FKCaseSaleRescheduleReasonLid");

                    b.HasIndex(new[] { "CaseSaleStatusLid" }, "FKCaseSaleStatusLid");

                    b.HasIndex(new[] { "CaseFclid" }, "FK__CaseSale__CaseFCLId");

                    b.ToTable("CaseSale", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSalePubCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseSalePubCostId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseSaleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PubCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PKCaseSalePubCost");

                    b.HasIndex(new[] { "CaseSaleId" }, "FK__CaseSalePubCosts__CaseSaleId");

                    b.ToTable("CaseSalePubCost", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSalePubDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseSalePubDateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseSaleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PubCompany")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("date");

                    b.Property<int>("RunOrder")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKCaseSalePubDate");

                    b.HasIndex(new[] { "CaseSaleId" }, "FK__CaseSalePubDates__CaseSaleId");

                    b.ToTable("CaseSalePubDate", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseStateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateAbbrev")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PKCaseState");

                    b.ToTable("CaseState", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSubpoena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseSubpoenaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseSubpoenaClosedReasonLid")
                        .HasColumnType("int");

                    b.Property<int?>("CaseSubpoenaDocTransmissionMethodLid")
                        .HasColumnType("int");

                    b.Property<int?>("CaseSubpoenaPcidataIncludedLid")
                        .HasColumnType("int")
                        .HasColumnName("CaseSubpoenaPCIDataIncludedLid");

                    b.Property<int>("CaseSubpoenaStatusLid")
                        .HasColumnType("int");

                    b.Property<int?>("CaseSubpoenaSubTypeLid")
                        .HasColumnType("int");

                    b.Property<int?>("CaseSubpoenaTypeLid")
                        .HasColumnType("int");

                    b.Property<int?>("CertificationMsrspecialistId")
                        .HasColumnType("int")
                        .HasColumnName("CertificationMSRSpecialistId");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("CourtCaseNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoldReasons")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("LpreferenceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LPReferenceId");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NegotiatedDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OpenedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServicingMsrspecialistId")
                        .HasColumnType("int")
                        .HasColumnName("ServicingMSRSpecialistId");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("SubpoenaFormNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TriageMsrspecialistId")
                        .HasColumnType("int")
                        .HasColumnName("TriageMSRSpecialistId");

                    b.HasKey("Id")
                        .HasName("PKCaseSubpoena");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseSubpoenaClientJobId");

                    b.HasIndex(new[] { "CaseSubpoenaClosedReasonLid" }, "FKCaseSubpoenaClosedReasonLid");

                    b.HasIndex(new[] { "CaseSubpoenaDocTransmissionMethodLid" }, "FKCaseSubpoenaDocTransmissionMethodLid");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKCaseSubpoenaLawPracticeId");

                    b.HasIndex(new[] { "CaseSubpoenaPcidataIncludedLid" }, "FKCaseSubpoenaPCIDataIncludedLid");

                    b.HasIndex(new[] { "CaseSubpoenaStatusLid" }, "FKCaseSubpoenaStatusLid");

                    b.HasIndex(new[] { "CaseSubpoenaSubTypeLid" }, "FKCaseSubpoenaSubTypeLid");

                    b.HasIndex(new[] { "CaseSubpoenaTypeLid" }, "FKCaseSubpoenaTypeLid");

                    b.HasIndex(new[] { "TriageMsrspecialistId" }, "FKLoginDetailJobListingCaseSubpoena");

                    b.HasIndex(new[] { "CertificationMsrspecialistId" }, "FKLoginDetailJobListingCertificationMSRSpecialistId");

                    b.HasIndex(new[] { "ServicingMsrspecialistId" }, "FKLoginDetailJobListingServicingMSRSpecialistId");

                    b.ToTable("CaseSubpoena", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSubpoenaOrderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseSubpoenaOrderInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalComments")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CaseSubpoenaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InformationReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformationRequestedComment")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("InformationRequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InformationRequestedLid")
                        .HasColumnType("int");

                    b.Property<string>("InformationRequestedStatusComment")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("InformationRequestedStatusLid")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IsOrderAskingForRecordsLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestedDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestedDateTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseSubpoenaOrderInfo");

                    b.HasIndex(new[] { "CaseSubpoenaId" }, "FKCaseSubpoenaOrderInfoCaseSubpoenaId");

                    b.HasIndex(new[] { "InformationRequestedLid" }, "FKCaseSubpoenaOrderInfoInformationRequestedLid");

                    b.HasIndex(new[] { "InformationRequestedStatusLid" }, "FKInformationRequestedStatusLid");

                    b.HasIndex(new[] { "IsOrderAskingForRecordsLid" }, "FKIsOrderAskingForRecordsLid");

                    b.ToTable("CaseSubpoenaOrderInfo", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseFclid")
                        .HasColumnType("int")
                        .HasColumnName("CaseFCLId");

                    b.Property<int?>("CaseTitleStatusLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChainofTitleInfoDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientInvestorTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentTisdocId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentTISDocId");

                    b.Property<string>("DeedBook")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeedGrantee")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("DeedGrantor")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("DeedIntrumentNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeedPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeedReRecBook")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeedReRecIntrumentNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeedReRecPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeedReRecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeedRecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeedType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("DueOnSale")
                        .HasColumnType("bit");

                    b.Property<bool?>("GalNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("GenrlNotes")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<bool?>("HasAssignments")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasDelinquentTaxes")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasMersassignment")
                        .HasColumnType("bit")
                        .HasColumnName("HasMERSAssignment");

                    b.Property<bool?>("InconsistantDates")
                        .HasColumnType("bit");

                    b.Property<string>("IntegrationId1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsHomesteded")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMobilehome")
                        .HasColumnType("bit")
                        .HasColumnName("isMobilehome");

                    b.Property<bool?>("IsMultiplex")
                        .HasColumnType("bit")
                        .HasColumnName("isMultiplex");

                    b.Property<bool?>("IsTaxRoll")
                        .HasColumnType("bit")
                        .HasColumnName("isTaxRoll");

                    b.Property<int?>("LastPreparedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTisgeneratedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastTISGeneratedBy");

                    b.Property<DateTime?>("LastTisgeneratedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastTISGeneratedDate");

                    b.Property<bool?>("LegalDescriptionIsGood")
                        .HasColumnType("bit");

                    b.Property<string>("LeinLegalDescriptionError")
                        .HasColumnType("text");

                    b.Property<string>("MobileHomeDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("MobileHomeDescriptionVarified")
                        .HasColumnType("bit");

                    b.Property<bool?>("ModificationParaReviewed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MortLegalDescriptionError")
                        .HasColumnType("text");

                    b.Property<int?>("MortgagePositionLid")
                        .HasColumnType("int");

                    b.Property<bool?>("NeedsReformation")
                        .HasColumnType("bit");

                    b.Property<string>("NeedsReformationReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Njblock")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NJBlock");

                    b.Property<string>("Njlot")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NJLot");

                    b.Property<string>("Njqualifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NJQualifier");

                    b.Property<bool?>("NonForeclosableLiens")
                        .HasColumnType("bit");

                    b.Property<string>("NonForeclosableLiensDetail")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("NumberOfUnits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("OpenLp")
                        .HasColumnType("bit");

                    b.Property<string>("OpenLpDetail")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PreparedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ProbateNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("ProductType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropelId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PropelID");

                    b.Property<int?>("PropertyDistrictLid")
                        .HasColumnType("int")
                        .HasColumnName("PropertyDistrictLID");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SuperiorLiens")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("TasSaleSched")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TaxDeedApp")
                        .HasColumnType("bit");

                    b.Property<string>("TaxId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TitleClaimBody")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<string>("TitleClaimPolicyNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TitleClaims")
                        .HasColumnType("bit");

                    b.Property<string>("TitleClaimsDetail")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("TitleCompanyLid")
                        .HasColumnType("int");

                    b.Property<string>("TitleLegalDescription")
                        .HasColumnType("text");

                    b.Property<string>("TitleMortBook")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("TitleMortExecutedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleMortInstrumentNum")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TitleMortPage")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("TitleMortRecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleMortgagee")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TitleMortgagor")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TitleTypeOfMortgage")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("TitleUnderWriter")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfMortLid")
                        .HasColumnType("int");

                    b.Property<int?>("UnderwriterLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidUntiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WhoSignedMortgage")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("WhoSignedNote")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitle");

                    b.HasIndex(new[] { "CaseFclid" }, "FKCaseTitleCaseFCLId");

                    b.HasIndex(new[] { "CaseTitleStatusLid" }, "FKCaseTitleCaseTitleStatusLid");

                    b.HasIndex(new[] { "TitleUnderWriter" }, "FKCaseTitleCaseTitleUnderWriterId");

                    b.HasIndex(new[] { "ClientInvestorTypeLid" }, "FKCaseTitleClientInvestorTypeLid");

                    b.HasIndex(new[] { "CurrentTisdocId" }, "FKCaseTitleCurrentTISDocId");

                    b.HasIndex(new[] { "MortgagePositionLid" }, "FKCaseTitleMortgagePositionLid");

                    b.HasIndex(new[] { "TitleCompanyLid" }, "FKCaseTitleTitleCompanyLid");

                    b.HasIndex(new[] { "TypeOfMortLid" }, "FKCaseTitleTypeOfMortLid");

                    b.HasIndex(new[] { "UnderwriterLid" }, "FKCaseTitleUnderwriterLid");

                    b.ToTable("CaseTitle", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleAssignmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AomexecutedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("AOMExecutedOn");

                    b.Property<decimal?>("AssigmCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AssignmentTypeCode")
                        .HasColumnType("int");

                    b.Property<decimal?>("BillingFee")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RecievedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("RecievedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoppedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("StoppedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoppedReason")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleAssignment");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleAssignmentCaseTitleId");

                    b.ToTable("CaseTitleAssignment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleAssignmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleAssignmentItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseTitleAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultDaysToComplete")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("TitleAssignmentCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TitleAssignmentDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("TitleAssignmentFee")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleAssignmentItem");

                    b.HasIndex(new[] { "CaseTitleAssignmentId" }, "FKCaseTitleAssignmentItemCaseTitleAssignmentId");

                    b.ToTable("CaseTitleAssignmentItem", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleDlinqTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleDlinqTaxId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TaxGoodUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleDlinqTax");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleDlinqTaxCaseTitleId");

                    b.ToTable("CaseTitleDlinqTax", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleFileAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleFileAssignId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignFrom")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("AssignTo")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Book")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrumentNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleFileAssign");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleFileAssignCaseTitleId");

                    b.ToTable("CaseTitleFileAssign", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleIrstaxLien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleIrstaxLienId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AssessmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClaimFileDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAgainst")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FileBy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IrsformNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IRSFormNo");

                    b.Property<decimal?>("LienAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("LienDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LienRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("PendingTitleIssueInd")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SsntaxId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("SSNTaxID");

                    b.Property<string>("Volume")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleIrstaxLien");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleIRSTaxLienCaseTitleId");

                    b.ToTable("CaseTitleIrstaxLien", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleJudgmentLien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleJudgmentLienId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AttachmentAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AttachmentPage")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("AttachmentRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttachmentVolume")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClaimFileDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileBy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("JudgmentCostAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("JudgmentDamageAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("JudgmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LienDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LienRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("PendingTitleIssueInd")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Volume")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleJudgmentLien");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleJudgmentLienCaseTitleId");

                    b.ToTable("CaseTitleJudgmentLien", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleModParagraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleModParagraphId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Book")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Intrument")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ModificationAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UnRecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UnrecordedMod")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleModParagraph");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleModParagraphCaseTitleId");

                    b.ToTable("CaseTitleModParagraph", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleMortgTaxLien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleMortgTaxLienId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClaimFileDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileBy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("LienAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("LienDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LienRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LienTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("PendingTitleIssueInd")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Volume")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleMortgTaxLien");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleMortgTaxLienCaseTitleId");

                    b.HasIndex(new[] { "LienTypeLid" }, "FKCaseTitleMortgTaxLienLienTypeLid");

                    b.ToTable("CaseTitleMortgTaxLien", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleMortgWithAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleMortgWithAssignmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClaimFileDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CorrectiveAom")
                        .HasColumnType("bit")
                        .HasColumnName("CorrectiveAOM");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrHolder")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Instrument")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("LienDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LienRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrigHolder")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("OrigPrincipalBal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Page")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("PendingTitleIssueInd")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("ReplacementAom")
                        .HasColumnType("bit")
                        .HasColumnName("ReplacementAOM");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Volume")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleMortgWithAssignment");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleMortgWithAssignmentCaseTitleId");

                    b.ToTable("CaseTitleMortgWithAssignment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleReRecorded", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleReRecordedId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Book")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instrument")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ReRecorderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleReRecorded");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleReRecordedCaseTitleId");

                    b.ToTable("CaseTitleReRecorded", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleSpecialCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleSpecialCountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Book")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ByVirtueOf")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CaseTitleId")
                        .HasColumnType("int");

                    b.Property<int>("CaseTitleSpecialCountTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grantees")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Grantors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleSpecialCountText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TitleSpecialCountTitle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleSpecialCount");

                    b.HasIndex(new[] { "CaseTitleId" }, "FKCaseTitleSpecialCountCaseTitleId");

                    b.HasIndex(new[] { "CaseTitleSpecialCountTemplateId" }, "FKCaseTitleSpecialCountCaseTitleSpecialCountTemplateId");

                    b.ToTable("CaseTitleSpecialCount", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleSpecialCountTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleSpecialCountTemplateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountTypeLid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Other")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("StateId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TitleSctmergeParagraphFj")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("TitleSCTMergeParagraphFJ");

                    b.Property<string>("TitleSctmergeParagraphMsj")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("TitleSCTMergeParagraphMSJ");

                    b.Property<string>("TitleSpecialCountTemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleSpecialCountTemplateText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("TitleSpecialCountTemplateTitle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleSpecialCountTemplate");

                    b.HasIndex(new[] { "CountTypeLid" }, "FKCaseTitleSpecialCountTemplateCountTypeLid");

                    b.ToTable("CaseTitleSpecialCountTemplate", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleUnderWriter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseTitleUnderWriterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SendEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("SendMail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendUps")
                        .HasColumnType("bit")
                        .HasColumnName("SendUPS");

                    b.Property<string>("UnderWriterAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UnderWriterAddress2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UnderWriterAttentionTo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UnderWriterCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UnderWriterName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UnderWriterSendVia")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("UnderWriterSendVIA");

                    b.Property<string>("UnderWriterState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UnderWriterZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKCaseTitleUnderWriter");

                    b.ToTable("CaseTitleUnderWriter", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseWrit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseWritId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AdditionalDocumentationLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AnswerDueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AnswerFiledDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CaseDetailLid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CaseOpenedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CaseTypeLid")
                        .HasColumnType("int");

                    b.Property<int>("CaseWritStatusLid")
                        .HasColumnType("int");

                    b.Property<decimal?>("CheckIssuedAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedReasonLid")
                        .HasColumnType("int");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("CourtCaseNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CourtTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EwlcaseNumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("EWLCaseNumber");

                    b.Property<DateTime?>("EwlcreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EWLCreationDate");

                    b.Property<DateTime?>("FundsRemittanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GarnisheeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("GarnishmentDebtAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Garnishor")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("HearingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LpreferenceId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LPReferenceId");

                    b.Property<DateTime?>("MailScannedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RtgLid")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("WritFiledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WritServiceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCaseWrit");

                    b.HasIndex(new[] { "AdditionalDocumentationLid" }, "FKCaseWritAdditionalDocumentationLid");

                    b.HasIndex(new[] { "CaseDetailLid" }, "FKCaseWritCaseDetailLid");

                    b.HasIndex(new[] { "CaseTypeLid" }, "FKCaseWritCaseTypeLid");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCaseWritClientJobId");

                    b.HasIndex(new[] { "ClosedReasonLid" }, "FKCaseWritClosedReasonLid");

                    b.HasIndex(new[] { "CountyId" }, "FKCaseWritCountyId");

                    b.HasIndex(new[] { "CourtTypeId" }, "FKCaseWritCourtTypeId");

                    b.HasIndex(new[] { "GarnisheeId" }, "FKCaseWritGarnisheeId");

                    b.HasIndex(new[] { "RtgLid" }, "FKCaseWritRtgLid");

                    b.HasIndex(new[] { "CaseWritStatusLid" }, "FKCaseWritStatusLid");

                    b.ToTable("CaseWrit", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseWritFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseWritFinancialId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcctHolderName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AcctLast4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AcctNotes")
                        .HasMaxLength(4500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4500)");

                    b.Property<int?>("AcctStatusLid")
                        .HasColumnType("int");

                    b.Property<int?>("AcctStylingLid")
                        .HasColumnType("int");

                    b.Property<decimal?>("AmtOnHold")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmtinAcct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CaseWritId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExemptionAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("FedBenefitsOverLookback")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProtectedAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalAmtOnHold")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PKCaseWritFinancial");

                    b.HasIndex(new[] { "AcctStatusLid" }, "FKCaseWritFinancialAcctStatusLid");

                    b.HasIndex(new[] { "AcctStylingLid" }, "FKCaseWritFinancialAcctStylingLid");

                    b.HasIndex(new[] { "CaseWritId" }, "FKCaseWritFinancialCaseWritId");

                    b.ToTable("CaseWritFinancial", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CientJobLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CientJobLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LogText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKCientJobLog");

                    b.HasIndex(new[] { "ClientJobId" }, "FKCientJobLogClientJobId");

                    b.ToTable("CientJobLog", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientAddress1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientBillAddress1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientBillAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientBillCity")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ClientBillState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ClientBillZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ClientCity")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ClientFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ClientLogoLocation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ClientMailAlertLogEmail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientMainContact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ClientState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ClientTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("ClientZip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobeClientCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("IsReverseClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvestClientCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("UseNativeTasksOnly")
                        .HasColumnType("bit")
                        .HasColumnName("useNativeTasksOnly");

                    b.HasKey("Id")
                        .HasName("PKClient");

                    b.HasIndex(new[] { "ClientTypeLid" }, "FKClientTypeId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("AssociatedMileStones")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AttyCompleteCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AttyCompleteCodeEnc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("AttyCompleteCodeEnteredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttyCompleteCodeIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("AutomationId1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AutomationId2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<int?>("ChainCompletedAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ChainCompletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChainCompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ChainEventDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CheckDupesonChainComplete")
                        .HasColumnType("bit");

                    b.Property<int>("ClientAssignmentTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ClientDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<int?>("CompleteDocumentRepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("CompleteNotes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CompletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedNote")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EventAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("ExtensionDuration")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IntegrationKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IntegrationOther")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsBillableEvent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCarveOut")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExtensionEvent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInProgress")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVoided")
                        .HasColumnType("bit")
                        .HasColumnName("isVoided");

                    b.Property<int?>("LastAccessBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastAccessedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("ProgressNotes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("ReportectedVersion")
                        .HasColumnType("int");

                    b.Property<int?>("ReprojectedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReprojectedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("SendtoServicer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SnoozeUntilDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTasksOnComplete")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StartedByAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("StartedDocumentRepositoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKClientAssignment");

                    b.HasIndex(new[] { "AssignedTo" }, "FKClientAssignmentAssignedTo");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKClientAssignmentCaseJobDefendantId");

                    b.HasIndex(new[] { "ChainCompletedBy" }, "FKClientAssignmentChainCompletedBy");

                    b.HasIndex(new[] { "ClientAssignmentTaskId" }, "FKClientAssignmentClientAssignmentTaskId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKClientAssignmentClientJobId");

                    b.HasIndex(new[] { "CompleteDocumentRepositoryId" }, "FKClientAssignmentCompleteDocumentRepositoryId");

                    b.HasIndex(new[] { "CompletedBy" }, "FKClientAssignmentCompletedBy");

                    b.HasIndex(new[] { "CreatedBy" }, "FKClientAssignmentCreatedBy");

                    b.HasIndex(new[] { "LastAccessBy" }, "FKClientAssignmentLastAccessBy");

                    b.HasIndex(new[] { "ReprojectedBy" }, "FKClientAssignmentReprojectedBy");

                    b.HasIndex(new[] { "StartedDocumentRepositoryId" }, "FKClientAssignmentStartedDocumentRepositoryId");

                    b.HasIndex(new[] { "UpdatedBy" }, "FKClientAssignmentUpdatedBy");

                    b.HasIndex(new[] { "VoidedBy" }, "FKClientAssignmentVoidedBy");

                    b.HasIndex(new[] { "ParentAssignmentId" }, "Ref81194");

                    b.HasIndex(new[] { "ChainCompletedAssignmentId" }, "Ref81208");

                    b.HasIndex(new[] { "StartedByAssignmentId" }, "Ref81210");

                    b.ToTable("ClientAssignment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentCheckListCr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentCheckListCrId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentTaskCheckListCrid")
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskCheckListCRId");

                    b.Property<int>("ClientAssignmentTaskCheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentCheckListCr");

                    b.HasIndex(new[] { "ClientAssignmentTaskCheckListId" }, "FKClientAssignmentCheckListCRClientAssignmentTaskCheckListId");

                    b.HasIndex(new[] { "ClientAssignmentTaskCheckListCrid" }, "FKClientAssignmentTaskCheckListCRId");

                    b.ToTable("ClientAssignmentCheckListCr", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentCheckListVr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentCheckListVrId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssignmentTaskCheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ValueDisplay")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentCheckListVr");

                    b.HasIndex(new[] { "ClientAssignmentId" }, "FKClientAssignmentCheckListVRClientAssignmentId");

                    b.HasIndex(new[] { "ClientAssignmentTaskCheckListId" }, "FKClientAssignmentCheckListVRClientAssignmentTaskCheckListId");

                    b.ToTable("ClientAssignmentCheckListVr", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentHold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentHoldId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AttachmentDocumentRepositoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssignmentParentId")
                        .HasColumnType("int");

                    b.Property<string>("CloseNote")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeniedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeniedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeniedReason")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime?>("HoldEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HoldStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoldTypeLid")
                        .HasColumnType("int");

                    b.Property<int>("HoldingAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OpenNote")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentHold");

                    b.HasIndex(new[] { "AttachmentDocumentRepositoryId" }, "FKAttachmentDocumentRepositoryId");

                    b.HasIndex(new[] { "ApprovedById" }, "FKClientAssignmentHoldApprovedById");

                    b.HasIndex(new[] { "ClientAssignmentId" }, "FKClientAssignmentHoldClientAssignmentId");

                    b.HasIndex(new[] { "DeniedById" }, "FKClientAssignmentHoldDeniedById");

                    b.HasIndex(new[] { "HoldTypeLid" }, "FKClientAssignmentHoldHoldTypeLid");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKClientAssignmentHoldLawPracticeId");

                    b.HasIndex(new[] { "ClientAssignmentParentId" }, "Ref81170");

                    b.HasIndex(new[] { "HoldingAssignmentId" }, "Ref81171");

                    b.ToTable("ClientAssignmentHold", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentJournalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("SecondCounter")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentJournal");

                    b.HasIndex(new[] { "ClientAssignmentId" }, "FKClientAssignmentJournalClientAssignmentId");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKClientAssignmentJournalLoginDetailId");

                    b.ToTable("ClientAssignmentJournal", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentReProHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentReProHistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentRepositoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NewTargetDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("OldTargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ReprojectedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReprojectedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SequenseNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentReProHistory");

                    b.HasIndex(new[] { "ApprovedBy" }, "FKClientAssignmentReProHistoryApprovedBy");

                    b.HasIndex(new[] { "ClientAssignmentId" }, "FKClientAssignmentReProHistoryClientAssignmentId");

                    b.HasIndex(new[] { "DocumentRepositoryId" }, "FKClientAssignmentReProHistoryDocumentRespositoryId");

                    b.HasIndex(new[] { "ReprojectedBy" }, "FKClientAssignmentReProHistoryReprojectedBy");

                    b.ToTable("ClientAssignmentReProHistory", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentScheduled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentScheduledId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Aborted")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssignmentTaskScheduledId")
                        .HasColumnType("int");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessTries")
                        .HasColumnType("int");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartOnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentScheduled");

                    b.HasIndex(new[] { "ClientAssignmentTaskScheduledId" }, "FKClientAssignmentScheduledClientAssignmentTaskScheduledId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKClientAssignmentScheduledClientJobId");

                    b.HasIndex(new[] { "FromClientAssignmentId" }, "FKClientAssignmentScheduledFromClientAssignmentId");

                    b.HasIndex(new[] { "ClientAssignmentId" }, "FKClientAssignmentScheduledNewClientAssignmentId");

                    b.HasIndex(new[] { "ProcessedBy" }, "FKClientAssignmentScheduledProcessedBy");

                    b.ToTable("ClientAssignmentScheduled", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AblbiDirectional")
                        .HasColumnType("bit")
                        .HasColumnName("ABLBiDirectional");

                    b.Property<int?>("AcctFeeActivityCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("AcctFeeApprovalCoaitemId")
                        .HasColumnType("int")
                        .HasColumnName("AcctFeeApprovalCOAItemId");

                    b.Property<int?>("AcctFeeReasonId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AlertAllOnReproject")
                        .HasColumnType("bit");

                    b.Property<bool>("AlertAssigneeWhenComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("AlertAttyOnReportject")
                        .HasColumnType("bit");

                    b.Property<bool>("AlertAttyWhenComplete")
                        .HasColumnType("bit");

                    b.Property<string>("AlertEmailAddressWhenComplete")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AlertOthersOnReproject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("AllowAnyToComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDuplicate")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowParallel")
                        .HasColumnType("bit");

                    b.Property<string>("AssignActionDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("AssignByFileLocation")
                        .HasColumnType("bit");

                    b.Property<string>("AssignmentCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("AssignmentCompletesChain")
                        .HasColumnType("bit");

                    b.Property<int>("AssignmentDuration")
                        .HasColumnType("int");

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("AssocMergePackageId")
                        .HasColumnType("int");

                    b.Property<bool?>("AutoAssignAtty")
                        .HasColumnType("bit");

                    b.Property<bool?>("AutoAssignPara")
                        .HasColumnType("bit");

                    b.Property<string>("AutoAssignTheseWhenComplete")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AutoCompleteTaskIfExists")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("BillOnCompletion")
                        .HasColumnType("bit");

                    b.Property<string>("CalendarColor")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("CanBeAssignedToVender")
                        .HasColumnType("bit");

                    b.Property<int>("CatListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("CheckDupsIfChainComplete")
                        .HasColumnType("bit");

                    b.Property<string>("ClaimState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("ClientDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientSystemCommand")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientSystemDefualtCode")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("CloseDepartmentCase")
                        .HasColumnType("bit");

                    b.Property<int?>("CloseFileReasonId")
                        .HasColumnType("int");

                    b.Property<string>("CompleteActionDateName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompleteCommand")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CompleteOnChainCompletion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CreateCommand")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultAssignmentText")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("DefaultPriority")
                        .HasColumnType("int");

                    b.Property<string>("DefaultSecUserId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DeleteOnComplete")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("GroupCategory1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("GroupCategory2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("GroupCategory3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("GroupCategory4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("GroupCategory5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("GroupCategory6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("GroupCategory7")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<bool>("HasCheckList")
                        .HasColumnType("bit")
                        .HasColumnName("hasCheckList");

                    b.Property<string>("HoldWorkOfAssignments")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("HoldWorkOnDepts")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IgnorHoldsFromTaskIds")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("IntegrationCode1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IntegrationCode2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IntegrationTaskCode")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<bool?>("IsAttyreview")
                        .HasColumnType("bit")
                        .HasColumnName("isATTYReview");

                    b.Property<bool?>("IsClientCompleteTask")
                        .HasColumnType("bit")
                        .HasColumnName("isClientCompleteTask");

                    b.Property<bool?>("IsClientTask")
                        .HasColumnType("bit")
                        .HasColumnName("isClientTask");

                    b.Property<bool?>("IsConsoleCompleteJob")
                        .HasColumnType("bit")
                        .HasColumnName("isConsoleCompleteJob");

                    b.Property<bool?>("IsDocumentApprovalTask")
                        .HasColumnType("bit")
                        .HasColumnName("isDocumentApprovalTask");

                    b.Property<bool?>("IsHearingEvent")
                        .HasColumnType("bit")
                        .HasColumnName("isHearingEvent");

                    b.Property<bool?>("IsLawPracticeCompleteTask")
                        .HasColumnType("bit")
                        .HasColumnName("isLawPracticeCompleteTask");

                    b.Property<bool?>("IsLawPracticeTask")
                        .HasColumnType("bit")
                        .HasColumnName("isLawPracticeTask");

                    b.Property<bool?>("IsLocalCounselCompleteTask")
                        .HasColumnType("bit")
                        .HasColumnName("isLocalCounselCompleteTask");

                    b.Property<bool?>("IsLocalCounselTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isLocalCounselTask")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsQueueTask")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsStartupTask")
                        .HasColumnType("bit")
                        .HasColumnName("isStartupTask");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LawActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<int>("MaxReprojectionDays")
                        .HasColumnType("int");

                    b.Property<int>("MaxReprojections")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTimeOutOpen")
                        .HasColumnType("int");

                    b.Property<string>("MergeDocumentOnComplete")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MergeDocumentOnStart")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OptionalCompletionAssignments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrimaryTask")
                        .HasColumnType("bit");

                    b.Property<int?>("PriorMileStone")
                        .HasColumnType("int");

                    b.Property<bool?>("RequireChecklistForCompletion")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireCoaapproval")
                        .HasColumnType("bit")
                        .HasColumnName("RequireCOAApproval");

                    b.Property<bool?>("RequireEventDateOnComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresAttyApproval")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequiresComplettion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("RequiresDocumentId")
                        .HasColumnType("int");

                    b.Property<bool?>("RetainAssignee")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReturnDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("RunCreateCmdOnTargetDate")
                        .HasColumnType("bit")
                        .HasColumnName("runCreateCmdOnTargetDate");

                    b.Property<int?>("SetHearingAppId")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowChecklistByDefult")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowDocumentAttachmentArea")
                        .HasColumnType("bit");

                    b.Property<int>("ShowWhenDueInDays")
                        .HasColumnType("int");

                    b.Property<int>("ShowWhenEventInDays")
                        .HasColumnType("int");

                    b.Property<bool>("StartAtReferral")
                        .HasColumnType("bit");

                    b.Property<string>("StartOnChainCompletion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("StopAllWorkUntilDone")
                        .HasColumnType("bit");

                    b.Property<bool?>("UseCalendarDaysForTarget")
                        .HasColumnType("bit");

                    b.Property<int?>("UseForTagetTaskId")
                        .HasColumnType("int");

                    b.Property<string>("VoidOnComplete")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("WebPortalTool")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTask");

                    b.HasIndex(new[] { "AssocMergePackageId" }, "FKClientAssignmentTaskAssocMergePackageId");

                    b.HasIndex(new[] { "ClientId" }, "FKClientAssignmentTaskClientId");

                    b.HasIndex(new[] { "JobTypeId" }, "FKClientAssignmentTaskJobTypeId");

                    b.HasIndex(new[] { "RequiresDocumentId" }, "FKClientAssignmentTaskRequiresDocumentId");

                    b.HasIndex(new[] { "ParentTaskId" }, "Ref87213");

                    b.ToTable("ClientAssignmentTask", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskCheckListId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AssignClientWitness")
                        .HasColumnType("bit");

                    b.Property<string>("AssignmentsNo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AssignmentsYes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("AttachDropDocToAssDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoCompletesTasks")
                        .HasColumnType("bit");

                    b.Property<bool?>("BindDocumentToAssignment")
                        .HasColumnType("bit");

                    b.Property<int>("CheckListTypeLid")
                        .HasColumnType("int");

                    b.Property<int>("ClientAssignmentTaskId")
                        .HasColumnType("int");

                    b.Property<bool?>("CompletesFileAssignmentTaskId")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomControlName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomWorkScheduleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DropSql")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DropUpdaterControl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsConditional")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("KillAssignmentSchedule")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("MergeToken")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("MirrorToComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("mirrorToComment")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProcessCommand")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("RulesDefaultAssignments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("ShowDefendantForStartAssignment")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartsFileAssignmentsTaskId")
                        .HasColumnType("bit")
                        .HasColumnName("StartsFileAssignmentsTaskID");

                    b.Property<string>("TaskListItemTag")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TaskListName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UpdateField")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdateKeyField")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdateKeyValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdateTable")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("UpdateTopOne")
                        .HasColumnType("bit");

                    b.Property<bool?>("UseTaskListItemId")
                        .HasColumnType("bit")
                        .HasColumnName("UseTaskListItemID");

                    b.Property<bool>("UsesValueRules")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTaskCheckList");

                    b.HasIndex(new[] { "ClientAssignmentTaskId" }, "FKClientAssignmentTaskCheckListClientAssignmentTaskId");

                    b.HasIndex(new[] { "CheckListTypeLid" }, "FKClientAssignmentTaskCheckListTypeLid");

                    b.ToTable("ClientAssignmentTaskCheckList", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckListCr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskCheckListCrId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompareType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('==')");

                    b.Property<string>("ConditionName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DropDownSql")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<bool>("IsDropDown")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSql")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsTextBox")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelectValueSql")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTaskCheckListCr");

                    b.ToTable("ClientAssignmentTaskCheckListCr", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckListVr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskCheckListVrId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentTaskCheckListId")
                        .HasColumnType("int");

                    b.Property<string>("CompareValue")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RunCommandOnMatch")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("RunCommandOnNoMatch")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("StartAssigmnmentOnMatch")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("StartAssigmnmentOnNoMatch")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTaskCheckListVr");

                    b.HasIndex(new[] { "ClientAssignmentTaskCheckListId" }, "FKClientAssignmentTaskCheckListVRClientAssignmentTaskCheckListId");

                    b.ToTable("ClientAssignmentTaskCheckListVr", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskRecurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskRecurrenceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentTaskScheduledId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasDefaultValueSql("(getdate())")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("DayOrder")
                        .HasColumnType("int");

                    b.Property<string>("EndDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("EveryNumberType")
                        .HasColumnType("int");

                    b.Property<bool?>("EveryWeekday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Friday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Monday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RecurrenceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StartDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("TheOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("Thursday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Tuesday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasDefaultValueSql("(getdate())")
                        .IsFixedLength();

                    b.Property<bool?>("Wednesday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTaskRecurrence");

                    b.HasIndex(new[] { "ClientAssignmentTaskScheduledId" }, "FK_ClientAssignmentTaskRecurrence_ClientAssignmentTaskScheduled");

                    b.ToTable("ClientAssignmentTaskRecurrence", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskRuleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Bkchapter")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BKChapter");

                    b.Property<string>("Bkdistrict")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BKDistrict");

                    b.Property<string>("Bkstate")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BKState");

                    b.Property<string>("Client")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ClientAssignmentTaskCheckListId")
                        .HasColumnType("int");

                    b.Property<string>("County")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EffectiveEndDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("EffectiveStartDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NotIfMet")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlyIfMet")
                        .HasColumnType("bit");

                    b.Property<string>("ReplevinType")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RuleType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTaskRule");

                    b.HasIndex(new[] { "ClientAssignmentTaskCheckListId" }, "FKClientAssignmentTaskRuleClientAssignmentTaskCheckListId");

                    b.ToTable("ClientAssignmentTaskRule", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskScheduled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAssignmentTaskScheduledId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertWhenStarted")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("CalendarDay")
                        .HasColumnType("bit");

                    b.Property<int>("ClientAssignmentTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysFromTargetDate")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("LaunchTime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("RunScheduledOnStartNewAssign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("StartClientAssignmentTaskId")
                        .HasColumnType("int");

                    b.Property<bool?>("UseSaleDate")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PKClientAssignmentTaskScheduled");

                    b.HasIndex(new[] { "ClientAssignmentTaskId" }, "FKClientAssignmentTaskScheduledClientAssignmentTaskId");

                    b.HasIndex(new[] { "StartClientAssignmentTaskId" }, "FKClientAssignmentTaskStartClientAssignmentTaskId");

                    b.ToTable("ClientAssignmentTaskScheduled", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientDepartmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SysCode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("sysCode");

                    b.HasKey("Id")
                        .HasName("PKClientDepartment");

                    b.HasIndex(new[] { "ClientId" }, "FKClientDepartmentClientId");

                    b.ToTable("ClientDepartment", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientFacilityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FacilityTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKClientFacility");

                    b.HasIndex(new[] { "ClientId" }, "FKClientFacilityClientId");

                    b.HasIndex(new[] { "FacilityTypeLid" }, "FKClientFacilityFacilityTypeLid");

                    b.ToTable("ClientFacility", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientJobId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("ClientJobStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'O')")
                        .IsFixedLength();

                    b.Property<string>("ClosedDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobDataKeyId")
                        .HasColumnType("int")
                        .HasComment("This column represents the module id( casebkyid, casewritid)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalCounselId")
                        .HasColumnType("int");

                    b.Property<string>("LpreferranceNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LPReferranceNumber");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferralAcknolagedDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PKClientJob");

                    b.HasIndex(new[] { "CaseId" }, "FKClientJobCaseId");

                    b.HasIndex(new[] { "JobTypeId" }, "FKClientJobJobTypeId");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKClientJobLawPracticeId");

                    b.HasIndex(new[] { "LocalCounselId" }, "FKClientJobLocalCounselId");

                    b.ToTable("ClientJob", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJobActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientJobActivityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionClientAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionNote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ActionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActionTargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKClientJobActivity");

                    b.HasIndex(new[] { "ActionClientAssignmentId" }, "FKClientJobActivityActionClientAssignmentId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKClientJobActivityClientJobId");

                    b.ToTable("ClientJobActivity", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJobLegal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientJobLegalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegalDescBook")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LegalDescFromLid")
                        .HasColumnType("int");

                    b.Property<string>("LegalDescInstrument")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LegalDescPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LegalDescriptionCur")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("LegalDescriptionOrid")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKClientJobLegal");

                    b.HasIndex(new[] { "ClientJobId" }, "FKClientJobLegalClientJobId");

                    b.HasIndex(new[] { "LegalDescFromLid" }, "FKClientJobLegalLegalDescFromLid");

                    b.HasIndex(new[] { "VerifiedBy" }, "FKClientJobLegalVerifiedBy");

                    b.ToTable("ClientJobLegal", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJobListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientJobListingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartAssignmentsOnReferral")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PKClientJobListing");

                    b.HasIndex(new[] { "ClientId" }, "FKClientJobListingClientId");

                    b.HasIndex(new[] { "JobTypeId" }, "FKClientJobListingJobTypeId");

                    b.ToTable("ClientJobListing", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientLawPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientLawPracticeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AttyHourRate")
                        .HasColumnType("money");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("FcldoesTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("FCLDoesTitle")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("FirmwareUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("LawPracticeState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReferralPercent")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKClientLawPractice");

                    b.HasIndex(new[] { "ClientId" }, "FKClientLawPracticeClientId");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKClientLawPracticeLawPracticeId");

                    b.ToTable("ClientLawPractice", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientLawPracticeJobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientLawPracticeJobTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertReferralAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("AverageDaysToClose")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReferralPercent")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeldCases")
                        .HasColumnType("int");

                    b.Property<int>("TotalOpenCases")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKClientLawPracticeJobType");

                    b.HasIndex(new[] { "JobTypeId" }, "FKClientLawPracticeJobTypeJobTypeId");

                    b.ToTable("ClientLawPracticeJobType", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientStateLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientStateLocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Address2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DivisionName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Fax")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("fax");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentAdd1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PaymentAdd2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PaymentCity")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PaymentEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PaymentFax")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PaymentName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PaymentPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PaymentState")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PaymentZip")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("WitnessBar")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("WitnessName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Zip")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("PKClientStateLocation");

                    b.HasIndex(new[] { "ClientId" }, "FKClientStateLocationClientId");

                    b.ToTable("ClientStateLocation", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DefendantAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DefendantAddressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("AddressIsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotFoundAtAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("ServedAtThisAddress")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKDefendantAddress");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKDefendantAddressCaseJobDefendantId");

                    b.ToTable("DefendantAddress", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentMailOutHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentMailOutHistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Address2")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("BadRecordMessage")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("CaseJobDefendantId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DocumentMailJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EnvelopeDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceDocId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceDocID");

                    b.Property<string>("InvoiceImageId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("InvoiceImageID");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("InvoiceTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("IsBadRecord")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInvoiceImageProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsInvoiceReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsLetterImageProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<int?>("LetterDocId")
                        .HasColumnType("int")
                        .HasColumnName("LetterDocID");

                    b.Property<DateTime?>("MailSentOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MailServiceTypeLid")
                        .HasColumnType("int");

                    b.Property<int>("MailVendorLid")
                        .HasColumnType("int");

                    b.Property<string>("MasterInvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptId")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("ReceiptID");

                    b.Property<string>("RecipientName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SentByAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentOutDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("State")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TrackingLastEntry")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("VenderPostageAmount")
                        .HasColumnType("decimal(16, 3)");

                    b.Property<DateTime?>("VenderSentOut")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("VendorAdditionalCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VendorAffidavitCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("VendorPostalServiceRcvd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VendorPostalServiceSent")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("VendorServiceCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VendorTotalCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PKDocumentMailOutHistory");

                    b.HasIndex(new[] { "CaseJobDefendantId" }, "FKDocumentMailOutHistoryCaseJobDefendantId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKDocumentMailOutHistoryClientJobId");

                    b.HasIndex(new[] { "DocumentTypeId" }, "FKDocumentMailOutHistoryDocumentTypeId");

                    b.HasIndex(new[] { "MailServiceTypeLid" }, "FKDocumentMailOutHistoryMailServiceTypeLid");

                    b.HasIndex(new[] { "MailVendorLid" }, "FKDocumentMailOutHistoryMailVendorLid");

                    b.HasIndex(new[] { "SentByAssignmentId" }, "FKDocumentMailOutHistorySentByAssignmentId");

                    b.HasIndex(new[] { "EnvelopeDocumentId" }, "FKEnvelopeDocumentId");

                    b.ToTable("DocumentMailOutHistory", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentNoteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentRepositoryId")
                        .HasColumnType("int");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NoteOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.HasKey("Id")
                        .HasName("PKDocumentNote");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKDocumentNoteByUserId");

                    b.HasIndex(new[] { "DocumentRepositoryId" }, "FKDocumentNoteDocumentRepositoryId");

                    b.ToTable("DocumentNote", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentRepositoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BoundAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BoundCaseDefendantId")
                        .HasColumnType("int");

                    b.Property<int?>("BoundServiceDefendantId")
                        .HasColumnType("int");

                    b.Property<string>("CameFrom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ClientJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredToDefendantsOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryMethodLid")
                        .HasColumnType("int");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileLocationPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("FileLocationVirtualPath")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("FromCheckListId")
                        .HasColumnType("int");

                    b.Property<decimal?>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvoiceFulfilmentDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsCurrentVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isCurrentVersion")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsFiled")
                        .HasColumnType("bit");

                    b.Property<int?>("LastVersionDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("LawPracticeJobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextVersionDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id")
                        .HasName("PKDocumentRepository");

                    b.HasIndex(new[] { "BoundAssignmentId" }, "FKDocumentRepositoryBoundAssignmentId");

                    b.HasIndex(new[] { "BoundCaseDefendantId" }, "FKDocumentRepositoryBoundCaseDefendantId");

                    b.HasIndex(new[] { "BoundServiceDefendantId" }, "FKDocumentRepositoryBoundServiceDefendantId");

                    b.HasIndex(new[] { "ClientJobId" }, "FKDocumentRepositoryClientJobId");

                    b.HasIndex(new[] { "DeliveryMethodLid" }, "FKDocumentRepositoryDeliveryMethodLid");

                    b.HasIndex(new[] { "DocumentTypeId" }, "FKDocumentRepositoryDocumentTypeId");

                    b.HasIndex(new[] { "FromCheckListId" }, "FKDocumentRepositoryFromCheckListId");

                    b.HasIndex(new[] { "LawPracticeJobId" }, "FKDocumentRepositoryLawPracticeJobId");

                    b.HasIndex(new[] { "LastVersionDocumentId" }, "Ref117161");

                    b.HasIndex(new[] { "NextVersionDocumentId" }, "Ref117162");

                    b.ToTable("DocumentRepository", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowDuplicate")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowViewAll")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSendForService")
                        .HasColumnType("bit")
                        .HasColumnName("canSendForService");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCategoryLid")
                        .HasColumnType("int");

                    b.Property<string>("DocumentFileBase")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DocumentTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EnvokesFileAssignment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("HasVersioning")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("hasVersioning")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsClientView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsLawPracticeView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsLocalCounselView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsMergeDocument")
                        .HasColumnType("bit")
                        .HasColumnName("isMergeDocument");

                    b.Property<bool>("IsSecureDocument")
                        .HasColumnType("bit")
                        .HasColumnName("isSecureDocument");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvestDocumentCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RegisterAsAction")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendCertified")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendFirstClass")
                        .HasColumnType("bit");

                    b.Property<string>("SysDocumentCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sysDocumentCode");

                    b.HasKey("Id")
                        .HasName("PKDocumentType");

                    b.HasIndex(new[] { "ClientId" }, "FKDocumentTypeClientId");

                    b.HasIndex(new[] { "DocumentCategoryLid" }, "FKDocumentTypeDocumentCategoryLid");

                    b.HasIndex(new[] { "JobTypeId" }, "FKDocumentTypeJobTypeId");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Garnishee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GarnisheeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("GarnisheeAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("GarnisheeAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GarnisheeCity")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("GarnisheeFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GarnisheeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("GarnisheePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GarnisheeState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("GarnisheeZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKGarnishee");

                    b.HasIndex(new[] { "ClientId" }, "FKGarnisheeClientId");

                    b.ToTable("Garnishee", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanCreateNewCase")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("canCreateNewCase")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("CanHaveMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsClientStart")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isCLientStart")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsLawPracticeStart")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isLawPracticeStart")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsLocalCounselStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isLocalCounselStart")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsMasterJob")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isMasterJob")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("JobClientRefField")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('PKID')");

                    b.Property<string>("JobDataTable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("JobDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("JobIconLocation")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobPkfield")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JobPKField");

                    b.Property<string>("JobState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("JobSysCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("('sysfcl')");

                    b.Property<int>("JobTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("JobTemplateLocation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKJobType");

                    b.ToTable("JobType", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LawPracticeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CardDisplayNumber")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CardExpirationDate")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CardName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ContactBarNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentCmssystem")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CurrentCMSSystem");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("FirmStateCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("HasDevelopmentStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("HasEfileAbility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("HasEFileAbility")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("LawPracticeUserId")
                        .HasColumnType("int")
                        .HasColumnName("LawPracticeUserID");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumberOfAttorneys")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PracticeContact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PracticeLogoLocation")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PracticeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("PracticeTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("ReferralCompanyCode")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ServiceEventsLogon")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ServiceEventsPass")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ServiceEventsUrl")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ServiceEventsURL");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id")
                        .HasName("PKLawPractice");

                    b.HasIndex(new[] { "ClientId" }, "FKLawPracticeClientId");

                    b.HasIndex(new[] { "PracticeTypeLid" }, "FKPracticeTypeLid");

                    b.HasIndex(new[] { "ReferralCompanyCode" }, "UQ__LawPractice__54817C4C")
                        .IsUnique()
                        .HasFilter("[ReferralCompanyCode] IS NOT NULL");

                    b.ToTable("LawPractice", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPracticeJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LawPracticeJobId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContectMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("LpfileNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LPFileNumber");

                    b.Property<string>("Lpkey1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LPKey1");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKLawPracticeJob");

                    b.HasIndex(new[] { "JobTypeId" }, "FKLawPracticeJobJobTypeId");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKLawPracticeJobLawPracticeId");

                    b.ToTable("LawPracticeJob", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPracticeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LawPracticeUserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTypeCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("AttyBarNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("AttyLastPinCreated")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("AttyPinNumer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AttySignImagePath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<decimal?>("HourlyConntractRate")
                        .HasColumnType("money");

                    b.Property<bool>("IsAttorney")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocalCounsel")
                        .HasColumnType("bit")
                        .HasColumnName("isLocalCounsel");

                    b.Property<bool>("IsPara")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRemote")
                        .HasColumnType("bit")
                        .HasColumnName("isRemote");

                    b.Property<int>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("LawPracticeUserName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MgrLawPracticeUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Smsemail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SMSEmail");

                    b.Property<string>("Smtpemail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SMTPEmail");

                    b.HasKey("Id")
                        .HasName("PKLawPracticeUser");

                    b.HasIndex(new[] { "ClientId" }, "FKLawPracticeUserClientId");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKLawPracticeUserLawPracticeId");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKLawPracticeUserLoginDetailId");

                    b.ToTable("LawPracticeUser", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ListItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefValue1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DefValue2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DefValue3")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DefValue4")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DefValue5")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DefValue6")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DefaultDateDays")
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("InvokeAssignment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<int>("ListOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MergeText")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MergeValue")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemCategory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('System')");

                    b.Property<string>("SystemTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Value2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PKListItem");

                    b.ToTable("ListItem", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LocalCounsel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocalCounselId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsLcactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsLCActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Lcaddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LCAddress1");

                    b.Property<string>("Lcaddress2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LCAddress2");

                    b.Property<string>("LcbarNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LCBarNumber");

                    b.Property<string>("Lccity")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("LCCity");

                    b.Property<string>("LccompanyName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LCCompanyName");

                    b.Property<int?>("LccountyId")
                        .HasColumnType("int")
                        .HasColumnName("LCCountyId");

                    b.Property<string>("LcemailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LCEmailAddress");

                    b.Property<string>("LcfaxNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LCFaxNumber");

                    b.Property<string>("LcmoduleType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LCModuleType");

                    b.Property<string>("Lcname")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LCName");

                    b.Property<string>("LcphoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LCPhoneNumber");

                    b.Property<string>("Lcstate")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("LCState");

                    b.Property<string>("LctrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LCTrackingNumber");

                    b.Property<string>("Lczip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("LCZip");

                    b.Property<string>("LogoLocation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKLocalCounsel");

                    b.ToTable("LocalCounsel", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)")
                        .HasColumnName("AccessToken");

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BarNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CanAccessMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("CanAccessReports")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentToken")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("EnforcePasswordPol")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Fax")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsAcceptTermsandConditions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsClientAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("isLocked");

                    b.Property<bool?>("IsSuperAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsSysAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isSysAdmin");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastPasswordChange")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalCounselId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("LoginID");

                    b.Property<string>("LoginPwd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("LoginPWD");

                    b.Property<int>("LoginTypeLid")
                        .HasColumnType("int");

                    b.Property<string>("LoginUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogonIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LogonIP");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("PasswordExpiresIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((45))");

                    b.Property<int>("PendingAttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((3))");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PhoneAppCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("SentSubscription")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("TermsandConditionsAcceptDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Zip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PKLoginDetail");

                    b.HasIndex(new[] { "ClientId" }, "FKLoginDetailClientId");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKLoginDetailLawPracticeId");

                    b.HasIndex(new[] { "LocalCounselId" }, "FKLoginDetailLocalCounselId");

                    b.HasIndex(new[] { "LoginTypeLid" }, "FKLoginTypeLid");

                    b.HasIndex(new[] { "LoginId" }, "UDX_LogonInfo")
                        .IsUnique();

                    b.ToTable("LoginDetail", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetailJobListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginDetailJobListingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKLoginDetailJobListing");

                    b.HasIndex(new[] { "JobTypeId" }, "FKLoginDetailJobListingJobTypeId");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKLoginDetailJobListingLoginDetailId");

                    b.ToTable("LoginDetailJobListing", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetailsAccessRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginDetailsAccessRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessFieldClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AccessFieldLid")
                        .HasColumnType("int");

                    b.Property<string>("AccessFieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessFieldValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKLoginDetailsAccessRole");

                    b.HasIndex(new[] { "AccessFieldLid" }, "FKLoginDetailsAccessRoleAccessFieldLid");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKLoginDetailsAccessRoleLoginDetailId");

                    b.ToTable("LoginDetailsAccessRole", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailSubordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogonDetailSubordinateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanTakeAnyAssignment")
                        .HasColumnType("bit")
                        .HasColumnName("canTakeAnyAssignment");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvailible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isAvailible")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubordinateLoginDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKLogonDetailSubordinate");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKLogonDetailSubordinateLoginDetailId");

                    b.HasIndex(new[] { "SubordinateLoginDetailsId" }, "FKLogonDetailSubordinateSubordinateLoginDetailsId");

                    b.ToTable("LogonDetailSubordinate", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailsAssignmentPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogonDetailsAssignmentPoolId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentTaskId")
                        .HasColumnType("int");

                    b.Property<string>("CpadditionalSql")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("CPAdditionalSql");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvailible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isAvailible")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsQueueAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isQueueAdmin");

                    b.Property<int>("LoginDetailId")
                        .HasColumnType("int");

                    b.Property<int>("MaxQueueQuota")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotifyOnNewTasks")
                        .HasColumnType("bit");

                    b.Property<int?>("UseReportId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKLogonDetailsAssignmentPool");

                    b.HasIndex(new[] { "ClientAssignmentTaskId" }, "FKLogonDetailsAssignmentPoolClientAssignmentTaskId");

                    b.HasIndex(new[] { "LoginDetailId" }, "FKLogonDetailsAssignmentPoolLoginDetailId");

                    b.HasIndex(new[] { "UseReportId" }, "FKLogonDetailsAssignmentPoolUseReportId");

                    b.ToTable("LogonDetailsAssignmentPool", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailsAssignmentPoolTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogonDetailsAssignmentPoolTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAssignmentTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogonDetailsAssignmentPoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PKLogonDetailsAssignmentPoolTask");

                    b.HasIndex(new[] { "ClientAssignmentTaskId" }, "FKLogonDetailsAssignmentPoolTaskClientAssignmentTaskId");

                    b.HasIndex(new[] { "LogonDetailsAssignmentPoolId" }, "FKLogonDetailsAssignmentPoolTaskLogonDetailsAssignmentPoolId");

                    b.ToTable("LogonDetailsAssignmentPoolTask", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.MergeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MergeDocumentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BitNoValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BitYesValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BlankDataValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Category2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CodePageLocation")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CommonName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeCurrentOccupent")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int")
                        .HasColumnName("jobTypeId");

                    b.Property<int?>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<bool>("MakeForEachDendant")
                        .HasColumnType("bit");

                    b.Property<string>("MergeDocumentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MergeThesePartyTypes")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("OutDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OutFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("('docx')");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TemplateLocation")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id")
                        .HasName("PKMergeDocument");

                    b.ToTable("MergeDocument", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.MergeDocumentCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MergeDocumentCustomId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BitNoValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BitYesValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BlankDataValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CodePageLocation")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<int>("MergeDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateLocation")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id")
                        .HasName("PKMergeDocumentCustom");

                    b.HasIndex(new[] { "MergeDocumentId" }, "FKMergeDocumentCustomMergeDocumentId");

                    b.ToTable("MergeDocumentCustom", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.MergeDocumentToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MergeDocumentTokenId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsSql")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSqlFunction")
                        .HasColumnType("bit");

                    b.Property<string>("MergeDocumentPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MergeToken")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelectValueSql")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PKMergeDocumentToken");

                    b.ToTable("MergeDocumentToken", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.MergeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MergeFieldId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MergeFieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MergeToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MissingValueQuestion")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdateValueSql")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("UpdateValueSQL");

                    b.HasKey("Id")
                        .HasName("PKMergeField");

                    b.ToTable("MergeField", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MasterSql")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("MasterSQL");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutputFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("('xlsx')");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PKReport");

                    b.HasIndex(new[] { "ClientId" }, "FKReportClientId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportJobId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('email')");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Destination")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("InProgress")
                        .HasColumnType("bit")
                        .HasColumnName("inProgress");

                    b.Property<string>("LastResult")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("LastRun")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextRun")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasDefaultValueSql("(getdate())")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SheduleBetweenHoursEn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SheduleBetweenHoursEN");

                    b.Property<string>("SheduleBetweenHoursSt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SheduleBetweenHoursST");

                    b.Property<string>("SheduleDays")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("SheduleEveryMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SheduleTimeOnly")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id")
                        .HasName("PKReportJob");

                    b.HasIndex(new[] { "ReportId" }, "FKReportJobReportId");

                    b.ToTable("ReportJob", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJobParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportJobParameterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportJobId")
                        .HasColumnType("int");

                    b.Property<int>("ReportParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id")
                        .HasName("PKReportJobParameter");

                    b.HasIndex(new[] { "ReportJobId" }, "FKReportJobParameterReportJobId");

                    b.HasIndex(new[] { "ReportParameterId" }, "FKReportJobParameterReportParameterId");

                    b.ToTable("ReportJobParameter", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJobSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportJobScheduleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessEnd")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ProcessStart")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PKReportJobSchedule");

                    b.HasIndex(new[] { "ReportId" }, "FKReportJobScheduleReportId");

                    b.ToTable("ReportJobSchedule", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportMappingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LawPracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalCounselId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PKReportMapping");

                    b.HasIndex(new[] { "ClientId" }, "FKReportMappingClientId");

                    b.HasIndex(new[] { "LawPracticeId" }, "FKReportMappingLawPracticeId");

                    b.HasIndex(new[] { "LocalCounselId" }, "FKReportMappingLocalCounselId");

                    b.HasIndex(new[] { "ReportId" }, "FKReportMappingReportId");

                    b.ToTable("ReportMapping", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportParameterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('string')");

                    b.HasKey("Id")
                        .HasName("PKReportParameter");

                    b.HasIndex(new[] { "ReportId" }, "FKReportParameterReportId");

                    b.ToTable("ReportParameter", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ThirdPartyConvertion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThirdPartyConvertionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CaseSensitive")
                        .HasColumnType("bit");

                    b.Property<bool>("ContainsKey")
                        .HasColumnType("bit");

                    b.Property<string>("ConvertionKey")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ConvertionTag")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConvertionValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConvertionValue2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConvertionValue3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasMultiValues")
                        .HasColumnType("bit");

                    b.Property<int>("LawPracticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThirdPartyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PKThirdPartyConvertion");

                    b.ToTable("ThirdPartyConvertion", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ZipCodeDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZipCodeDictionaryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("country");

                    b.Property<string>("County")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("county");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrimaryCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("primary_city");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("state");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("PKZipCodeDictionary");

                    b.ToTable("ZipCodeDictionary", (string)null);
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrCaseSummary", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrCaseSummaries")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRCaseSummaryCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrConditionalOrder", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrConditionalOrders")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRConditionalOrderCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinInstallment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrFinInstallments")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRFinInstallmentCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinInterestRate", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrFinInterestRates")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRFinInterestRateCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinMissedPayment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrFinMissedPayments")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRFinMissedPaymentCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinOtherCost", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrFinOtherCosts")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRFinOtherCostCaseBKRId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CostDecription")
                        .WithMany("BkrfinOtherCosts")
                        .HasForeignKey("CostDecriptionLid")
                        .IsRequired()
                        .HasConstraintName("FKBKRFinOtherCostCostDecriptionLid");

                    b.Navigation("CaseBkr");

                    b.Navigation("CostDecription");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrFinancial", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrFinancials")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRFinancialCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrJournal", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrJournals")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRJournalCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrLoanModification", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrLoanModifications")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRLoanModificationCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrMfr", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrMfrs")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRMFRCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrPaymentChange", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrPaymentChanges")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRPaymentChangeCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrProperty", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseBkr", "CaseBkr")
                        .WithMany("BkrProperties")
                        .HasForeignKey("CaseBkrId")
                        .IsRequired()
                        .HasConstraintName("FKBKRPropertyCaseBKRId");

                    b.Navigation("CaseBkr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseAuto", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AssignedCsrl")
                        .WithMany("CaseAutoAssignedCsrls")
                        .HasForeignKey("AssignedCsrlid")
                        .HasConstraintName("FKCaseAutoAssignedCSRLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseAutoStatus")
                        .WithMany("CaseAutoCaseAutoStatusLs")
                        .HasForeignKey("CaseAutoStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseAutoStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseAutos")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseAutoClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClosedReason")
                        .WithMany("CaseAutoClosedReasonLs")
                        .HasForeignKey("ClosedReasonLid")
                        .HasConstraintName("FKCaseAutoClosedReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "VehicleStatus")
                        .WithMany("CaseAutoVehicleStatusLs")
                        .HasForeignKey("VehicleStatusLid")
                        .HasConstraintName("FKCaseAutoVehicleStatusLid");

                    b.Navigation("AssignedCsrl");

                    b.Navigation("CaseAutoStatus");

                    b.Navigation("ClientJob");

                    b.Navigation("ClosedReason");

                    b.Navigation("VehicleStatus");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseAutoBuyerInfo", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseAuto", "CaseAuto")
                        .WithMany("CaseAutoBuyerInfos")
                        .HasForeignKey("CaseAutoId")
                        .IsRequired()
                        .HasConstraintName("FKCaseAutoBuyerInfoCaseAutoId");

                    b.Navigation("CaseAuto");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseBkr", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "BkrSol")
                        .WithMany("CaseBkrBkrsolls")
                        .HasForeignKey("BkrSolLid")
                        .HasConstraintName("FKBKRSOLLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "BkrCircuit")
                        .WithMany("CaseBkrBkrcircuitLs")
                        .HasForeignKey("BkrcircuitLid")
                        .HasConstraintName("FKCircuitLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.BkrDistrict", "BkrDistrict")
                        .WithMany("CaseBkrs")
                        .HasForeignKey("BkrdistrictId")
                        .HasConstraintName("FKCaseBKRBKRDistrictId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseBkrclientInvestor")
                        .WithMany("CaseBkrCaseBkrclientInvestorLs")
                        .HasForeignKey("CaseBkrclientInvestorLid")
                        .HasConstraintName("FKCaseBKRClientInvestorLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseBkrclientInvestorType")
                        .WithMany("CaseBkrCaseBkrclientInvestorTypeLs")
                        .HasForeignKey("CaseBkrclientInvestorTypeLid")
                        .HasConstraintName("FKCaseBKRClientInvestorTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseBkrstatus")
                        .WithMany("CaseBkrCaseBkrstatusLs")
                        .HasForeignKey("CaseBkrstatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseBKRStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseBkrtype")
                        .WithMany("CaseBkrCaseBkrtypeLs")
                        .HasForeignKey("CaseBkrtypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseBKRTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseBkrs")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseBKRClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClosedReason")
                        .WithMany("CaseBkrClosedReasonLs")
                        .HasForeignKey("ClosedReasonLid")
                        .HasConstraintName("FKClosedReasonLid");

                    b.Navigation("BkrCircuit");

                    b.Navigation("BkrDistrict");

                    b.Navigation("BkrSol");

                    b.Navigation("CaseBkrclientInvestor");

                    b.Navigation("CaseBkrclientInvestorType");

                    b.Navigation("CaseBkrstatus");

                    b.Navigation("CaseBkrtype");

                    b.Navigation("ClientJob");

                    b.Navigation("ClosedReason");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCol", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseColCloseReason")
                        .WithMany("CaseColCaseColcloseReasonLs")
                        .HasForeignKey("CaseColcloseReasonLid")
                        .HasConstraintName("FKCaseCOLCloseReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseColStatus")
                        .WithMany("CaseColCaseColstatusLs")
                        .HasForeignKey("CaseColstatusLid")
                        .HasConstraintName("FKCaseCOLStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseCols")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCOLClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "LastAssignment")
                        .WithMany("CaseColLastAssignments")
                        .HasForeignKey("LastAssignmentId")
                        .HasConstraintName("FKCaseCOLLastAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "NextAssignment")
                        .WithMany("CaseColNextAssignments")
                        .HasForeignKey("NextAssignmentId")
                        .HasConstraintName("FKCaseCOLNextAssignmentId");

                    b.Navigation("CaseColCloseReason");

                    b.Navigation("CaseColStatus");

                    b.Navigation("ClientJob");

                    b.Navigation("LastAssignment");

                    b.Navigation("NextAssignment");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseColDefendantBankInfo", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AccountType")
                        .WithMany("CaseColDefendantBankInfos")
                        .HasForeignKey("AccountTypeLid")
                        .HasConstraintName("FKCaseCOLDefendantBankInfoAccountTypeLId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("CaseColDefendantBankInfos")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCOLDefendantBankInfoCaseJobDefendantId");

                    b.Navigation("AccountType");

                    b.Navigation("CaseJobDefendant");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseColDefendantCardInfo", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AccountType")
                        .WithMany("CaseColDefendantCardInfos")
                        .HasForeignKey("AccountTypeLid")
                        .HasConstraintName("FKCaseCOLDefendantCardInfoAccountTypeLId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("CaseColDefendantCardInfos")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCOLDefendantCardInfoCaseJobDefendantId");

                    b.Navigation("AccountType");

                    b.Navigation("CaseJobDefendant");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseColTransaction", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCol", "CaseCol")
                        .WithMany("CaseColTransactions")
                        .HasForeignKey("CaseColid")
                        .IsRequired()
                        .HasConstraintName("FKCaseCOLTransactionCaseCOLId");

                    b.Navigation("CaseCol");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseComment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseMaster", "Case")
                        .WithMany("CaseComments")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCommentCaseId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseComments")
                        .HasForeignKey("ClientJobId")
                        .HasConstraintName("FKCaseCommentClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CommentType")
                        .WithMany("CaseComments")
                        .HasForeignKey("CommentTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseCommentCommentTypeLid");

                    b.Navigation("Case");

                    b.Navigation("ClientJob");

                    b.Navigation("CommentType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCommentWhiteboard", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseMaster", "Case")
                        .WithMany("CaseCommentWhiteboards")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCommentWhiteboardCaseId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseCommentWhiteboards")
                        .HasForeignKey("ClientJobId")
                        .HasConstraintName("FKCaseCommentWhiteboardClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CommentType")
                        .WithMany("CaseCommentWhiteboards")
                        .HasForeignKey("CommentTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseCommentWhiteboardCommentTypeLid");

                    b.Navigation("Case");

                    b.Navigation("ClientJob");

                    b.Navigation("CommentType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCounty", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseState", "CaseState")
                        .WithMany("CaseCounties")
                        .HasForeignKey("CaseStateId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCountyCaseStateId");

                    b.Navigation("CaseState");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCourt", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "CaseCounty")
                        .WithMany("CaseCourts")
                        .HasForeignKey("CaseCountyId")
                        .IsRequired()
                        .HasConstraintName("FKCaseCourtCaseCountyId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseDistrict", "CaseDistrict")
                        .WithMany("CaseCourts")
                        .HasForeignKey("CaseDistrictId")
                        .HasConstraintName("FKCaseCourtCaseDistrictId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CourtType")
                        .WithMany("CaseCourts")
                        .HasForeignKey("CourtTypeLid")
                        .HasConstraintName("FKCaseCourtCourtType");

                    b.Navigation("CaseCounty");

                    b.Navigation("CaseDistrict");

                    b.Navigation("CourtType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseDistrict", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseState", "CaseState")
                        .WithMany("CaseDistricts")
                        .HasForeignKey("CaseStateId")
                        .IsRequired()
                        .HasConstraintName("FKCaseDistrictCaseStateId");

                    b.Navigation("CaseState");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseEviction", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "CaseCounty")
                        .WithMany("CaseEvictions")
                        .HasForeignKey("CaseCountyId")
                        .HasConstraintName("FKCaseEvictionCaseCountyId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseDistrict", "CaseDistrict")
                        .WithMany("CaseEvictions")
                        .HasForeignKey("CaseDistrictId")
                        .HasConstraintName("FKCaseEvictionCaseDistrictId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJudge", "CaseJudge")
                        .WithMany("CaseEvictions")
                        .HasForeignKey("CaseJudgeId")
                        .HasConstraintName("FKCaseEvictionCaseJudgeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "Circuit")
                        .WithMany("CaseEvictionCircuitLs")
                        .HasForeignKey("CircuitLid")
                        .HasConstraintName("FKCaseEvictionCircuitLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseEvictions")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseEvictionClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClosedReason")
                        .WithMany("CaseEvictionClosedReasonLs")
                        .HasForeignKey("ClosedReasonLid")
                        .HasConstraintName("FKCaseEvictionClosedReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "Division")
                        .WithMany("CaseEvictionDivisionLs")
                        .HasForeignKey("DivisionLid")
                        .HasConstraintName("FKCaseEvictionDivisionLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "EvictionStatus")
                        .WithMany("CaseEvictionEvictionStatusLs")
                        .HasForeignKey("EvictionStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseEvictionEvictionStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "EvictionType")
                        .WithMany("CaseEvictionEvictionTypeLs")
                        .HasForeignKey("EvictionTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseEvictionEvictionTypeLid");

                    b.Navigation("CaseCounty");

                    b.Navigation("CaseDistrict");

                    b.Navigation("CaseJudge");

                    b.Navigation("Circuit");

                    b.Navigation("ClientJob");

                    b.Navigation("ClosedReason");

                    b.Navigation("Division");

                    b.Navigation("EvictionStatus");

                    b.Navigation("EvictionType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseEvictionJournal", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseEviction", "CaseEviction")
                        .WithMany("CaseEvictionJournals")
                        .HasForeignKey("CaseEvictionId")
                        .IsRequired()
                        .HasConstraintName("FKCaseEvictionJournalCaseEvictionId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("CaseEvictionJournals")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKCaseEvictionJournalLoginDetailId");

                    b.Navigation("CaseEviction");

                    b.Navigation("LoginDetail");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseFcl", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseFclcaseType")
                        .WithMany("CaseFclCaseFclcaseTypeLs")
                        .HasForeignKey("CaseFclcaseTypeLid")
                        .HasConstraintName("FKCaseFCLCaseTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseFclclientInvestorType")
                        .WithMany("CaseFclCaseFclclientInvestorTypeLs")
                        .HasForeignKey("CaseFclclientInvestorTypeLid")
                        .HasConstraintName("FKCaseFCLClientInvestorTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseFclclosedReason")
                        .WithMany("CaseFclCaseFclclosedReasonLs")
                        .HasForeignKey("CaseFclclosedReasonLid")
                        .HasConstraintName("FKCaseFCLClosedReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseFclpropertyType")
                        .WithMany("CaseFclCaseFclpropertyTypeLs")
                        .HasForeignKey("CaseFclpropertyTypeLid")
                        .HasConstraintName("FKCaseFCLPropertyTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseFclstatus")
                        .WithMany("CaseFclCaseFclstatusLs")
                        .HasForeignKey("CaseFclstatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseFCLStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJudge", "CaseJudge")
                        .WithMany("CaseFcls")
                        .HasForeignKey("CaseJudgeId")
                        .HasConstraintName("FKCaseFCLCaseJudgeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseFcls")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseFCLClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "CountyFiledNavigation")
                        .WithMany("CaseFcls")
                        .HasForeignKey("CountyFiled")
                        .HasConstraintName("FKCaseFCLCountyFiled");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseState", "StateFiledNavigation")
                        .WithMany("CaseFcls")
                        .HasForeignKey("StateFiled")
                        .HasConstraintName("FKCaseFCLStateFiled");

                    b.Navigation("CaseFclcaseType");

                    b.Navigation("CaseFclclientInvestorType");

                    b.Navigation("CaseFclclosedReason");

                    b.Navigation("CaseFclpropertyType");

                    b.Navigation("CaseFclstatus");

                    b.Navigation("CaseJudge");

                    b.Navigation("ClientJob");

                    b.Navigation("CountyFiledNavigation");

                    b.Navigation("StateFiledNavigation");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantAtty", "CaseJobDefendantAtty")
                        .WithMany("CaseJobDefendants")
                        .HasForeignKey("CaseJobDefendantAttyId")
                        .HasConstraintName("FKCaseJobDefendantAttyId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseJobDefendants")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "PacerDocument")
                        .WithMany("CaseJobDefendants")
                        .HasForeignKey("PacerDocumentId")
                        .HasConstraintName("FKCaseJobDefendantPacerDocumentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "PartyType")
                        .WithMany("CaseJobDefendantPartyTypeLs")
                        .HasForeignKey("PartyTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantPartyTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "RequestorOrganization")
                        .WithMany("CaseJobDefendantRequestorOrganizationLs")
                        .HasForeignKey("RequestorOrganizationLid")
                        .HasConstraintName("FKCaseJobDefendantRequestorOrganizationLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ServiceType")
                        .WithMany("CaseJobDefendantServiceTypeLs")
                        .HasForeignKey("ServiceTypeLid")
                        .HasConstraintName("FKCaseJobDefendantServiceTypeLid");

                    b.Navigation("CaseJobDefendantAtty");

                    b.Navigation("ClientJob");

                    b.Navigation("PacerDocument");

                    b.Navigation("PartyType");

                    b.Navigation("RequestorOrganization");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantAdditionalAddress", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("CaseJobDefendantAdditionalAddresses")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantAdditionalAddressCaseJobDefendantId");

                    b.Navigation("CaseJobDefendant");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantByVirtueOf", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ByVirtueOf")
                        .WithMany("CaseJobDefendantByVirtueOfs")
                        .HasForeignKey("ByVirtueOfLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantByVirtueOfByVirtueOfLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("CaseJobDefendantByVirtueOfs")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantByVirtueOfCaseJobDefendantId");

                    b.Navigation("ByVirtueOf");

                    b.Navigation("CaseJobDefendant");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantSearchHistory", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "CameFromAssignment")
                        .WithMany("CaseJobDefendantSearchHistories")
                        .HasForeignKey("CameFromAssignmentId")
                        .HasConstraintName("FKCaseJobDefendantSearchHistoryCameFromAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("CaseJobDefendantSearchHistories")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantSearchHistoryCaseJobDefendantId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseJobDefendantSearchType")
                        .WithMany("CaseJobDefendantSearchHistories")
                        .HasForeignKey("CaseJobDefendantSearchTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantSearchHistoryCaseJobDefendantSearchTypeLid");

                    b.Navigation("CameFromAssignment");

                    b.Navigation("CaseJobDefendant");

                    b.Navigation("CaseJobDefendantSearchType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantService", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("CaseJobDefendantServices")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantServiceCaseJobDefendantId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignment")
                        .WithMany("CaseJobDefendantServices")
                        .HasForeignKey("ClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantServiceClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentType", "DocumentType")
                        .WithMany("CaseJobDefendantServices")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantServiceDocumentTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ServiceStatus")
                        .WithMany("CaseJobDefendantServiceServiceStatusLs")
                        .HasForeignKey("ServiceStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantServiceServiceStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ServiceType")
                        .WithMany("CaseJobDefendantServiceServiceTypeLs")
                        .HasForeignKey("ServiceTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseJobDefendantServiceServiceTypeLid");

                    b.Navigation("CaseJobDefendant");

                    b.Navigation("ClientAssignment");

                    b.Navigation("DocumentType");

                    b.Navigation("ServiceStatus");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJudge", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCourt", "CaseCourt")
                        .WithMany("CaseJudges")
                        .HasForeignKey("CaseCourtId")
                        .IsRequired()
                        .HasConstraintName("FKCaseJudgeCaseCourtId");

                    b.Navigation("CaseCourt");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseMaster", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "CaseCounty")
                        .WithMany("CaseMasters")
                        .HasForeignKey("CaseCountyId")
                        .IsRequired()
                        .HasConstraintName("FKCaseMasterCaseCountyId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("CaseMasters")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKCaseClientId");

                    b.Navigation("CaseCounty");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseReplevin", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPracticeUser", "AssignedAttyNavigation")
                        .WithMany("CaseReplevinAssignedAttyNavigations")
                        .HasForeignKey("AssignedAtty")
                        .HasConstraintName("FKCaseReplevinAssignedAtty");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LocalCounsel", "AssignedLocalCounselNavigation")
                        .WithMany("CaseReplevins")
                        .HasForeignKey("AssignedLocalCounsel")
                        .HasConstraintName("FKCaseReplevinAssignedLocalCounsel");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPracticeUser", "AssignedParaNavigation")
                        .WithMany("CaseReplevinAssignedParaNavigations")
                        .HasForeignKey("AssignedPara")
                        .HasConstraintName("FKCaseReplevinAssignedPara");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "AssignedRepNavigation")
                        .WithMany("CaseReplevins")
                        .HasForeignKey("AssignedRep")
                        .HasConstraintName("FKCaseReplevinAssignedRep");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseReplevinStatus")
                        .WithMany("CaseReplevinCaseReplevinStatusLs")
                        .HasForeignKey("CaseReplevinStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseReplevinStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseReplevinType")
                        .WithMany("CaseReplevinCaseReplevinTypeLs")
                        .HasForeignKey("CaseReplevinTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseReplevinTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseReplevins")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseReplevinClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClosedReason")
                        .WithMany("CaseReplevinClosedReasonLs")
                        .HasForeignKey("ClosedReasonLid")
                        .HasConstraintName("FKCaseReplevinClosedReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "CountyFiled")
                        .WithMany("CaseReplevinCountyFileds")
                        .HasForeignKey("CountyFiledId")
                        .HasConstraintName("FKCaseReplevinCountyFiledId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "DebtorCounty")
                        .WithMany("CaseReplevinDebtorCounties")
                        .HasForeignKey("DebtorCountyId")
                        .HasConstraintName("FKCaseReplevinDebtorCountyId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "DefaultReason")
                        .WithMany("CaseReplevinDefaultReasonLs")
                        .HasForeignKey("DefaultReasonLid")
                        .HasConstraintName("FKCaseReplevinDefaultReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseDistrict", "Division")
                        .WithMany("CaseReplevins")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FKCaseReplevinDivisionId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "InvestorType")
                        .WithMany("CaseReplevinInvestorTypeLs")
                        .HasForeignKey("InvestorTypeLid")
                        .HasConstraintName("FKCaseReplevinInvestorTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "OccupancyStatus")
                        .WithMany("CaseReplevinOccupancyStatusLs")
                        .HasForeignKey("OccupancyStatusLid")
                        .HasConstraintName("FKCaseReplevinOccupancyStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseState", "StateFiledNavigation")
                        .WithMany("CaseReplevins")
                        .HasForeignKey("StateFiled")
                        .HasConstraintName("FKCaseReplevinStateFiled");

                    b.Navigation("AssignedAttyNavigation");

                    b.Navigation("AssignedLocalCounselNavigation");

                    b.Navigation("AssignedParaNavigation");

                    b.Navigation("AssignedRepNavigation");

                    b.Navigation("CaseReplevinStatus");

                    b.Navigation("CaseReplevinType");

                    b.Navigation("ClientJob");

                    b.Navigation("ClosedReason");

                    b.Navigation("CountyFiled");

                    b.Navigation("DebtorCounty");

                    b.Navigation("DefaultReason");

                    b.Navigation("Division");

                    b.Navigation("InvestorType");

                    b.Navigation("OccupancyStatus");

                    b.Navigation("StateFiledNavigation");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSale", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CancelReason")
                        .WithMany("CaseSaleCancelReasonLs")
                        .HasForeignKey("CancelReasonLid")
                        .HasConstraintName("FKCaseSaleCancelReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseFcl", "CaseFcl")
                        .WithMany("CaseSales")
                        .HasForeignKey("CaseFclid")
                        .IsRequired()
                        .HasConstraintName("FK__CaseSale__CaseFCLId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSaleStatus")
                        .WithMany("CaseSaleCaseSaleStatusLs")
                        .HasForeignKey("CaseSaleStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseSaleStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "RescheduleReason")
                        .WithMany("CaseSaleRescheduleReasonLs")
                        .HasForeignKey("RescheduleReasonLid")
                        .HasConstraintName("FKCaseSaleRescheduleReasonLid");

                    b.Navigation("CancelReason");

                    b.Navigation("CaseFcl");

                    b.Navigation("CaseSaleStatus");

                    b.Navigation("RescheduleReason");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSalePubCost", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseSale", "CaseSale")
                        .WithMany("CaseSalePubCosts")
                        .HasForeignKey("CaseSaleId")
                        .HasConstraintName("FK__CaseSalePubCosts__CaseSaleId");

                    b.Navigation("CaseSale");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSalePubDate", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseSale", "CaseSale")
                        .WithMany("CaseSalePubDates")
                        .HasForeignKey("CaseSaleId")
                        .IsRequired()
                        .HasConstraintName("FK__CaseSalePubDates__CaseSaleId");

                    b.Navigation("CaseSale");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSubpoena", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSubpoenaClosedReason")
                        .WithMany("CaseSubpoenaCaseSubpoenaClosedReasonLs")
                        .HasForeignKey("CaseSubpoenaClosedReasonLid")
                        .HasConstraintName("FKCaseSubpoenaClosedReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSubpoenaDocTransmissionMethod")
                        .WithMany("CaseSubpoenaCaseSubpoenaDocTransmissionMethodLs")
                        .HasForeignKey("CaseSubpoenaDocTransmissionMethodLid")
                        .HasConstraintName("FKCaseSubpoenaDocTransmissionMethodLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSubpoenaPcidataIncluded")
                        .WithMany("CaseSubpoenaCaseSubpoenaPcidataIncludedLs")
                        .HasForeignKey("CaseSubpoenaPcidataIncludedLid")
                        .HasConstraintName("FKCaseSubpoenaPCIDataIncludedLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSubpoenaStatus")
                        .WithMany("CaseSubpoenaCaseSubpoenaStatusLs")
                        .HasForeignKey("CaseSubpoenaStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseSubpoenaStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSubpoenaSubType")
                        .WithMany("CaseSubpoenaCaseSubpoenaSubTypeLs")
                        .HasForeignKey("CaseSubpoenaSubTypeLid")
                        .HasConstraintName("FKCaseSubpoenaSubTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseSubpoenaType")
                        .WithMany("CaseSubpoenaCaseSubpoenaTypeLs")
                        .HasForeignKey("CaseSubpoenaTypeLid")
                        .HasConstraintName("FKCaseSubpoenaTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetailJobListing", "CertificationMsrspecialist")
                        .WithMany("CaseSubpoenaCertificationMsrspecialists")
                        .HasForeignKey("CertificationMsrspecialistId")
                        .HasConstraintName("FKLoginDetailJobListingCertificationMSRSpecialistId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseSubpoenas")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseSubpoenaClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("CaseSubpoenas")
                        .HasForeignKey("LawPracticeId")
                        .IsRequired()
                        .HasConstraintName("FKCaseSubpoenaLawPracticeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetailJobListing", "ServicingMsrspecialist")
                        .WithMany("CaseSubpoenaServicingMsrspecialists")
                        .HasForeignKey("ServicingMsrspecialistId")
                        .IsRequired()
                        .HasConstraintName("FKLoginDetailJobListingServicingMSRSpecialistId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetailJobListing", "TriageMsrspecialist")
                        .WithMany("CaseSubpoenaTriageMsrspecialists")
                        .HasForeignKey("TriageMsrspecialistId")
                        .HasConstraintName("FKLoginDetailJobListingCaseSubpoena");

                    b.Navigation("CaseSubpoenaClosedReason");

                    b.Navigation("CaseSubpoenaDocTransmissionMethod");

                    b.Navigation("CaseSubpoenaPcidataIncluded");

                    b.Navigation("CaseSubpoenaStatus");

                    b.Navigation("CaseSubpoenaSubType");

                    b.Navigation("CaseSubpoenaType");

                    b.Navigation("CertificationMsrspecialist");

                    b.Navigation("ClientJob");

                    b.Navigation("LawPractice");

                    b.Navigation("ServicingMsrspecialist");

                    b.Navigation("TriageMsrspecialist");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSubpoenaOrderInfo", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseSubpoena", "CaseSubpoena")
                        .WithMany("CaseSubpoenaOrderInfos")
                        .HasForeignKey("CaseSubpoenaId")
                        .IsRequired()
                        .HasConstraintName("FKCaseSubpoenaOrderInfoCaseSubpoenaId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "InformationRequested")
                        .WithMany("CaseSubpoenaOrderInfoInformationRequestedLs")
                        .HasForeignKey("InformationRequestedLid")
                        .HasConstraintName("FKCaseSubpoenaOrderInfoInformationRequestedLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "InformationRequestedStatus")
                        .WithMany("CaseSubpoenaOrderInfoInformationRequestedStatusLs")
                        .HasForeignKey("InformationRequestedStatusLid")
                        .HasConstraintName("FKInformationRequestedStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "IsOrderAskingForRecords")
                        .WithMany("CaseSubpoenaOrderInfoIsOrderAskingForRecordsLs")
                        .HasForeignKey("IsOrderAskingForRecordsLid")
                        .HasConstraintName("FKIsOrderAskingForRecordsLid");

                    b.Navigation("CaseSubpoena");

                    b.Navigation("InformationRequested");

                    b.Navigation("InformationRequestedStatus");

                    b.Navigation("IsOrderAskingForRecords");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitle", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseFcl", "CaseFcl")
                        .WithMany("CaseTitles")
                        .HasForeignKey("CaseFclid")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleCaseFCLId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseTitleStatus")
                        .WithMany("CaseTitleCaseTitleStatusLs")
                        .HasForeignKey("CaseTitleStatusLid")
                        .HasConstraintName("FKCaseTitleCaseTitleStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClientInvestorType")
                        .WithMany("CaseTitleClientInvestorTypeLs")
                        .HasForeignKey("ClientInvestorTypeLid")
                        .HasConstraintName("FKCaseTitleClientInvestorTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "CurrentTisdoc")
                        .WithMany("CaseTitles")
                        .HasForeignKey("CurrentTisdocId")
                        .HasConstraintName("FKCaseTitleCurrentTISDocId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "MortgagePosition")
                        .WithMany("CaseTitleMortgagePositionLs")
                        .HasForeignKey("MortgagePositionLid")
                        .HasConstraintName("FKCaseTitleMortgagePositionLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "TitleCompany")
                        .WithMany("CaseTitleTitleCompanyLs")
                        .HasForeignKey("TitleCompanyLid")
                        .HasConstraintName("FKCaseTitleTitleCompanyLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitleUnderWriter", "TitleUnderWriterNavigation")
                        .WithMany("CaseTitles")
                        .HasForeignKey("TitleUnderWriter")
                        .HasConstraintName("FKCaseTitleCaseTitleUnderWriterId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "TypeOfMort")
                        .WithMany("CaseTitleTypeOfMortLs")
                        .HasForeignKey("TypeOfMortLid")
                        .HasConstraintName("FKCaseTitleTypeOfMortLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "Underwriter")
                        .WithMany("CaseTitleUnderwriterLs")
                        .HasForeignKey("UnderwriterLid")
                        .HasConstraintName("FKCaseTitleUnderwriterLid");

                    b.Navigation("CaseFcl");

                    b.Navigation("CaseTitleStatus");

                    b.Navigation("ClientInvestorType");

                    b.Navigation("CurrentTisdoc");

                    b.Navigation("MortgagePosition");

                    b.Navigation("TitleCompany");

                    b.Navigation("TitleUnderWriterNavigation");

                    b.Navigation("TypeOfMort");

                    b.Navigation("Underwriter");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleAssignment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleAssignments")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleAssignmentCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleAssignmentItem", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitleAssignment", "CaseTitleAssignment")
                        .WithMany("CaseTitleAssignmentItems")
                        .HasForeignKey("CaseTitleAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleAssignmentItemCaseTitleAssignmentId");

                    b.Navigation("CaseTitleAssignment");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleDlinqTax", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleDlinqTaxes")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleDlinqTaxCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleFileAssign", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleFileAssigns")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleFileAssignCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleIrstaxLien", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleIrstaxLiens")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleIRSTaxLienCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleJudgmentLien", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleJudgmentLiens")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleJudgmentLienCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleModParagraph", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleModParagraphs")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleModParagraphCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleMortgTaxLien", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleMortgTaxLiens")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleMortgTaxLienCaseTitleId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "LienType")
                        .WithMany("CaseTitleMortgTaxLiens")
                        .HasForeignKey("LienTypeLid")
                        .HasConstraintName("FKCaseTitleMortgTaxLienLienTypeLid");

                    b.Navigation("CaseTitle");

                    b.Navigation("LienType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleMortgWithAssignment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleMortgWithAssignments")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleMortgWithAssignmentCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleReRecorded", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleReRecordeds")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleReRecordedCaseTitleId");

                    b.Navigation("CaseTitle");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleSpecialCount", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitle", "CaseTitle")
                        .WithMany("CaseTitleSpecialCounts")
                        .HasForeignKey("CaseTitleId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleSpecialCountCaseTitleId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseTitleSpecialCountTemplate", "CaseTitleSpecialCountTemplate")
                        .WithMany("CaseTitleSpecialCounts")
                        .HasForeignKey("CaseTitleSpecialCountTemplateId")
                        .IsRequired()
                        .HasConstraintName("FKCaseTitleSpecialCountCaseTitleSpecialCountTemplateId");

                    b.Navigation("CaseTitle");

                    b.Navigation("CaseTitleSpecialCountTemplate");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleSpecialCountTemplate", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CountType")
                        .WithMany("CaseTitleSpecialCountTemplates")
                        .HasForeignKey("CountTypeLid")
                        .HasConstraintName("FKCaseTitleSpecialCountTemplateCountTypeLid");

                    b.Navigation("CountType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseWrit", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AdditionalDocumentation")
                        .WithMany("CaseWritAdditionalDocumentationLs")
                        .HasForeignKey("AdditionalDocumentationLid")
                        .HasConstraintName("FKCaseWritAdditionalDocumentationLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseDetail")
                        .WithMany("CaseWritCaseDetailLs")
                        .HasForeignKey("CaseDetailLid")
                        .HasConstraintName("FKCaseWritCaseDetailLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseType")
                        .WithMany("CaseWritCaseTypeLs")
                        .HasForeignKey("CaseTypeLid")
                        .HasConstraintName("FKCaseWritCaseTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CaseWritStatus")
                        .WithMany("CaseWritCaseWritStatusLs")
                        .HasForeignKey("CaseWritStatusLid")
                        .IsRequired()
                        .HasConstraintName("FKCaseWritStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CaseWrits")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCaseWritClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClosedReason")
                        .WithMany("CaseWritClosedReasonLs")
                        .HasForeignKey("ClosedReasonLid")
                        .HasConstraintName("FKCaseWritClosedReasonLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCounty", "County")
                        .WithMany("CaseWrits")
                        .HasForeignKey("CountyId")
                        .HasConstraintName("FKCaseWritCountyId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseCourt", "CourtType")
                        .WithMany("CaseWrits")
                        .HasForeignKey("CourtTypeId")
                        .HasConstraintName("FKCaseWritCourtTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Garnishee", "Garnishee")
                        .WithMany("CaseWrits")
                        .HasForeignKey("GarnisheeId")
                        .HasConstraintName("FKCaseWritGarnisheeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "Rtg")
                        .WithMany("CaseWritRtgLs")
                        .HasForeignKey("RtgLid")
                        .HasConstraintName("FKCaseWritRtgLid");

                    b.Navigation("AdditionalDocumentation");

                    b.Navigation("CaseDetail");

                    b.Navigation("CaseType");

                    b.Navigation("CaseWritStatus");

                    b.Navigation("ClientJob");

                    b.Navigation("ClosedReason");

                    b.Navigation("County");

                    b.Navigation("CourtType");

                    b.Navigation("Garnishee");

                    b.Navigation("Rtg");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseWritFinancial", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AcctStatus")
                        .WithMany("CaseWritFinancialAcctStatusLs")
                        .HasForeignKey("AcctStatusLid")
                        .HasConstraintName("FKCaseWritFinancialAcctStatusLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AcctStyling")
                        .WithMany("CaseWritFinancialAcctStylingLs")
                        .HasForeignKey("AcctStylingLid")
                        .HasConstraintName("FKCaseWritFinancialAcctStylingLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseWrit", "CaseWrit")
                        .WithMany("CaseWritFinancials")
                        .HasForeignKey("CaseWritId")
                        .IsRequired()
                        .HasConstraintName("FKCaseWritFinancialCaseWritId");

                    b.Navigation("AcctStatus");

                    b.Navigation("AcctStyling");

                    b.Navigation("CaseWrit");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CientJobLog", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("CientJobLogs")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKCientJobLogClientJobId");

                    b.Navigation("ClientJob");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Client", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "ClientTypeL")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKClientTypeId");

                    b.Navigation("ClientTypeL");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "AssignedToNavigation")
                        .WithMany("ClientAssignmentAssignedToNavigations")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FKClientAssignmentAssignedTo");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("ClientAssignments")
                        .HasForeignKey("CaseJobDefendantId")
                        .HasConstraintName("FKClientAssignmentCaseJobDefendantId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ChainCompletedAssignment")
                        .WithMany("InverseChainCompletedAssignment")
                        .HasForeignKey("ChainCompletedAssignmentId")
                        .HasConstraintName("RefClientAssignment208");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "ChainCompletedByNavigation")
                        .WithMany("ClientAssignmentChainCompletedByNavigations")
                        .HasForeignKey("ChainCompletedBy")
                        .HasConstraintName("FKClientAssignmentChainCompletedBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "ClientAssignmentTask")
                        .WithMany("ClientAssignments")
                        .HasForeignKey("ClientAssignmentTaskId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentClientAssignmentTaskId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("ClientAssignments")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "CompleteDocumentRepository")
                        .WithMany("ClientAssignmentCompleteDocumentRepositories")
                        .HasForeignKey("CompleteDocumentRepositoryId")
                        .HasConstraintName("FKClientAssignmentCompleteDocumentRepositoryId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "CompletedByNavigation")
                        .WithMany("ClientAssignmentCompletedByNavigations")
                        .HasForeignKey("CompletedBy")
                        .HasConstraintName("FKClientAssignmentCompletedBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "CreatedByNavigation")
                        .WithMany("ClientAssignmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentCreatedBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LastAccessByNavigation")
                        .WithMany("ClientAssignmentLastAccessByNavigations")
                        .HasForeignKey("LastAccessBy")
                        .HasConstraintName("FKClientAssignmentLastAccessBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ParentAssignment")
                        .WithMany("InverseParentAssignment")
                        .HasForeignKey("ParentAssignmentId")
                        .IsRequired()
                        .HasConstraintName("RefClientAssignment194");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "ReprojectedByNavigation")
                        .WithMany("ClientAssignmentReprojectedByNavigations")
                        .HasForeignKey("ReprojectedBy")
                        .HasConstraintName("FKClientAssignmentReprojectedBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "StartedByAssignment")
                        .WithMany("InverseStartedByAssignment")
                        .HasForeignKey("StartedByAssignmentId")
                        .HasConstraintName("RefClientAssignment210");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "StartedDocumentRepository")
                        .WithMany("ClientAssignmentStartedDocumentRepositories")
                        .HasForeignKey("StartedDocumentRepositoryId")
                        .HasConstraintName("FKClientAssignmentStartedDocumentRepositoryId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "UpdatedByNavigation")
                        .WithMany("ClientAssignmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentUpdatedBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "VoidedByNavigation")
                        .WithMany("ClientAssignmentVoidedByNavigations")
                        .HasForeignKey("VoidedBy")
                        .HasConstraintName("FKClientAssignmentVoidedBy");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("CaseJobDefendant");

                    b.Navigation("ChainCompletedAssignment");

                    b.Navigation("ChainCompletedByNavigation");

                    b.Navigation("ClientAssignmentTask");

                    b.Navigation("ClientJob");

                    b.Navigation("CompleteDocumentRepository");

                    b.Navigation("CompletedByNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("LastAccessByNavigation");

                    b.Navigation("ParentAssignment");

                    b.Navigation("ReprojectedByNavigation");

                    b.Navigation("StartedByAssignment");

                    b.Navigation("StartedDocumentRepository");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VoidedByNavigation");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentCheckListCr", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckListCr", "ClientAssignmentTaskCheckListCr")
                        .WithMany("ClientAssignmentCheckListCrs")
                        .HasForeignKey("ClientAssignmentTaskCheckListCrid")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskCheckListCRId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", "ClientAssignmentTaskCheckList")
                        .WithMany("ClientAssignmentCheckListCrs")
                        .HasForeignKey("ClientAssignmentTaskCheckListId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentCheckListCRClientAssignmentTaskCheckListId");

                    b.Navigation("ClientAssignmentTaskCheckList");

                    b.Navigation("ClientAssignmentTaskCheckListCr");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentCheckListVr", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignment")
                        .WithMany("ClientAssignmentCheckListVrs")
                        .HasForeignKey("ClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentCheckListVRClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", "ClientAssignmentTaskCheckList")
                        .WithMany("ClientAssignmentCheckListVrs")
                        .HasForeignKey("ClientAssignmentTaskCheckListId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentCheckListVRClientAssignmentTaskCheckListId");

                    b.Navigation("ClientAssignment");

                    b.Navigation("ClientAssignmentTaskCheckList");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentHold", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "ApprovedBy")
                        .WithMany("ClientAssignmentHoldApprovedBies")
                        .HasForeignKey("ApprovedById")
                        .HasConstraintName("FKClientAssignmentHoldApprovedById");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "AttachmentDocumentRepository")
                        .WithMany("ClientAssignmentHolds")
                        .HasForeignKey("AttachmentDocumentRepositoryId")
                        .HasConstraintName("FKAttachmentDocumentRepositoryId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignment")
                        .WithMany("ClientAssignmentHoldClientAssignments")
                        .HasForeignKey("ClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentHoldClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignmentParent")
                        .WithMany("ClientAssignmentHoldClientAssignmentParents")
                        .HasForeignKey("ClientAssignmentParentId")
                        .IsRequired()
                        .HasConstraintName("RefClientAssignment170");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "DeniedBy")
                        .WithMany("ClientAssignmentHoldDeniedBies")
                        .HasForeignKey("DeniedById")
                        .HasConstraintName("FKClientAssignmentHoldDeniedById");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "HoldTypeL")
                        .WithMany("ClientAssignmentHolds")
                        .HasForeignKey("HoldTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentHoldHoldTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "HoldingAssignment")
                        .WithMany("ClientAssignmentHoldHoldingAssignments")
                        .HasForeignKey("HoldingAssignmentId")
                        .IsRequired()
                        .HasConstraintName("RefClientAssignment171");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("ClientAssignmentHolds")
                        .HasForeignKey("LawPracticeId")
                        .HasConstraintName("FKClientAssignmentHoldLawPracticeId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("AttachmentDocumentRepository");

                    b.Navigation("ClientAssignment");

                    b.Navigation("ClientAssignmentParent");

                    b.Navigation("DeniedBy");

                    b.Navigation("HoldTypeL");

                    b.Navigation("HoldingAssignment");

                    b.Navigation("LawPractice");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentJournal", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignment")
                        .WithMany("ClientAssignmentJournals")
                        .HasForeignKey("ClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentJournalClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("ClientAssignmentJournals")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentJournalLoginDetailId");

                    b.Navigation("ClientAssignment");

                    b.Navigation("LoginDetail");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentReProHistory", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "ApprovedByNavigation")
                        .WithMany("ClientAssignmentReProHistoryApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FKClientAssignmentReProHistoryApprovedBy");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignment")
                        .WithMany("ClientAssignmentReProHistories")
                        .HasForeignKey("ClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentReProHistoryClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "DocumentRepository")
                        .WithMany("ClientAssignmentReProHistories")
                        .HasForeignKey("DocumentRepositoryId")
                        .HasConstraintName("FKClientAssignmentReProHistoryDocumentRespositoryId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "ReprojectedByNavigation")
                        .WithMany("ClientAssignmentReProHistoryReprojectedByNavigations")
                        .HasForeignKey("ReprojectedBy")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentReProHistoryReprojectedBy");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("ClientAssignment");

                    b.Navigation("DocumentRepository");

                    b.Navigation("ReprojectedByNavigation");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentScheduled", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ClientAssignment")
                        .WithMany("ClientAssignmentScheduledClientAssignments")
                        .HasForeignKey("ClientAssignmentId")
                        .HasConstraintName("FKClientAssignmentScheduledNewClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskScheduled", "ClientAssignmentTaskScheduled")
                        .WithMany("ClientAssignmentScheduleds")
                        .HasForeignKey("ClientAssignmentTaskScheduledId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentScheduledClientAssignmentTaskScheduledId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("ClientAssignmentScheduleds")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentScheduledClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "FromClientAssignment")
                        .WithMany("ClientAssignmentScheduledFromClientAssignments")
                        .HasForeignKey("FromClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentScheduledFromClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "ProcessedByNavigation")
                        .WithMany("ClientAssignmentScheduleds")
                        .HasForeignKey("ProcessedBy")
                        .HasConstraintName("FKClientAssignmentScheduledProcessedBy");

                    b.Navigation("ClientAssignment");

                    b.Navigation("ClientAssignmentTaskScheduled");

                    b.Navigation("ClientJob");

                    b.Navigation("FromClientAssignment");

                    b.Navigation("ProcessedByNavigation");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.MergeDocument", "AssocMergePackage")
                        .WithMany("ClientAssignmentTasks")
                        .HasForeignKey("AssocMergePackageId")
                        .HasConstraintName("FKClientAssignmentTaskAssocMergePackageId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("ClientAssignmentTasks")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("ClientAssignmentTasks")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskJobTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "ParentTask")
                        .WithMany("InverseParentTask")
                        .HasForeignKey("ParentTaskId")
                        .IsRequired()
                        .HasConstraintName("RefClientAssignmentTask213");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentType", "RequiresDocument")
                        .WithMany("ClientAssignmentTasks")
                        .HasForeignKey("RequiresDocumentId")
                        .HasConstraintName("FKClientAssignmentTaskRequiresDocumentId");

                    b.Navigation("AssocMergePackage");

                    b.Navigation("Client");

                    b.Navigation("JobType");

                    b.Navigation("ParentTask");

                    b.Navigation("RequiresDocument");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "CheckListType")
                        .WithMany("ClientAssignmentTaskCheckLists")
                        .HasForeignKey("CheckListTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskCheckListTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "ClientAssignmentTask")
                        .WithMany("ClientAssignmentTaskCheckLists")
                        .HasForeignKey("ClientAssignmentTaskId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskCheckListClientAssignmentTaskId");

                    b.Navigation("CheckListType");

                    b.Navigation("ClientAssignmentTask");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckListVr", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", "ClientAssignmentTaskCheckList")
                        .WithMany("ClientAssignmentTaskCheckListVrs")
                        .HasForeignKey("ClientAssignmentTaskCheckListId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskCheckListVRClientAssignmentTaskCheckListId");

                    b.Navigation("ClientAssignmentTaskCheckList");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskRecurrence", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskScheduled", "ClientAssignmentTaskScheduled")
                        .WithMany("ClientAssignmentTaskRecurrences")
                        .HasForeignKey("ClientAssignmentTaskScheduledId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientAssignmentTaskRecurrence_ClientAssignmentTaskScheduled");

                    b.Navigation("ClientAssignmentTaskScheduled");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskRule", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", "ClientAssignmentTaskCheckList")
                        .WithMany("ClientAssignmentTaskRules")
                        .HasForeignKey("ClientAssignmentTaskCheckListId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskRuleClientAssignmentTaskCheckListId");

                    b.Navigation("ClientAssignmentTaskCheckList");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskScheduled", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "ClientAssignmentTask")
                        .WithMany("ClientAssignmentTaskScheduledClientAssignmentTasks")
                        .HasForeignKey("ClientAssignmentTaskId")
                        .IsRequired()
                        .HasConstraintName("FKClientAssignmentTaskScheduledClientAssignmentTaskId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "StartClientAssignmentTask")
                        .WithMany("ClientAssignmentTaskScheduledStartClientAssignmentTasks")
                        .HasForeignKey("StartClientAssignmentTaskId")
                        .IsRequired()
                        .HasConstraintName("RefClientAssignmentTask221");

                    b.Navigation("ClientAssignmentTask");

                    b.Navigation("StartClientAssignmentTask");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientDepartment", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKClientDepartmentClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientFacility", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("ClientFacilities")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKClientFacilityClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "FacilityType")
                        .WithMany("ClientFacilities")
                        .HasForeignKey("FacilityTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKClientFacilityFacilityTypeLid");

                    b.Navigation("Client");

                    b.Navigation("FacilityType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJob", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseMaster", "Case")
                        .WithMany("ClientJobs")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobCaseId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("ClientJobs")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobJobTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("ClientJobs")
                        .HasForeignKey("LawPracticeId")
                        .HasConstraintName("FKClientJobLawPracticeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LocalCounsel", "LocalCounsel")
                        .WithMany("ClientJobs")
                        .HasForeignKey("LocalCounselId")
                        .HasConstraintName("FKClientJobLocalCounselId");

                    b.Navigation("Case");

                    b.Navigation("JobType");

                    b.Navigation("LawPractice");

                    b.Navigation("LocalCounsel");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJobActivity", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "ActionClientAssignment")
                        .WithMany("ClientJobActivities")
                        .HasForeignKey("ActionClientAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobActivityActionClientAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("ClientJobActivities")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobActivityClientJobId");

                    b.Navigation("ActionClientAssignment");

                    b.Navigation("ClientJob");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJobLegal", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("ClientJobLegals")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobLegalClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "LegalDescFrom")
                        .WithMany("ClientJobLegals")
                        .HasForeignKey("LegalDescFromLid")
                        .HasConstraintName("FKClientJobLegalLegalDescFromLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "VerifiedByNavigation")
                        .WithMany("ClientJobLegals")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FKClientJobLegalVerifiedBy");

                    b.Navigation("ClientJob");

                    b.Navigation("LegalDescFrom");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJobListing", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("ClientJobListings")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobListingClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("ClientJobListings")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FKClientJobListingJobTypeId");

                    b.Navigation("Client");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientLawPractice", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("ClientLawPractices")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKClientLawPracticeClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("ClientLawPractices")
                        .HasForeignKey("LawPracticeId")
                        .IsRequired()
                        .HasConstraintName("FKClientLawPracticeLawPracticeId");

                    b.Navigation("Client");

                    b.Navigation("LawPractice");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientLawPracticeJobType", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("ClientLawPracticeJobTypes")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FKClientLawPracticeJobTypeJobTypeId");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientStateLocation", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("ClientStateLocations")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKClientStateLocationClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DefendantAddress", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("DefendantAddresses")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKDefendantAddressCaseJobDefendantId");

                    b.Navigation("CaseJobDefendant");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentMailOutHistory", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "CaseJobDefendant")
                        .WithMany("DocumentMailOutHistories")
                        .HasForeignKey("CaseJobDefendantId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentMailOutHistoryCaseJobDefendantId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("DocumentMailOutHistories")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentMailOutHistoryClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentType", "DocumentType")
                        .WithMany("DocumentMailOutHistories")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentMailOutHistoryDocumentTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "EnvelopeDocument")
                        .WithMany("DocumentMailOutHistories")
                        .HasForeignKey("EnvelopeDocumentId")
                        .HasConstraintName("FKEnvelopeDocumentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "MailServiceType")
                        .WithMany("DocumentMailOutHistoryMailServiceTypeLs")
                        .HasForeignKey("MailServiceTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKDocumentMailOutHistoryMailServiceTypeLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "MailVendorL")
                        .WithMany("DocumentMailOutHistoryMailVendorLs")
                        .HasForeignKey("MailVendorLid")
                        .IsRequired()
                        .HasConstraintName("FKDocumentMailOutHistoryMailVendorLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "SentByAssignment")
                        .WithMany("DocumentMailOutHistories")
                        .HasForeignKey("SentByAssignmentId")
                        .HasConstraintName("FKDocumentMailOutHistorySentByAssignmentId");

                    b.Navigation("CaseJobDefendant");

                    b.Navigation("ClientJob");

                    b.Navigation("DocumentType");

                    b.Navigation("EnvelopeDocument");

                    b.Navigation("MailServiceType");

                    b.Navigation("MailVendorL");

                    b.Navigation("SentByAssignment");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentNote", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "DocumentRepository")
                        .WithMany("DocumentNotes")
                        .HasForeignKey("DocumentRepositoryId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentNoteDocumentRepositoryId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("DocumentNotes")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentNoteByUserId");

                    b.Navigation("DocumentRepository");

                    b.Navigation("LoginDetail");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentRepository", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignment", "BoundAssignment")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("BoundAssignmentId")
                        .HasConstraintName("FKDocumentRepositoryBoundAssignmentId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", "BoundCaseDefendant")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("BoundCaseDefendantId")
                        .HasConstraintName("FKDocumentRepositoryBoundCaseDefendantId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantService", "BoundServiceDefendant")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("BoundServiceDefendantId")
                        .HasConstraintName("FKDocumentRepositoryBoundServiceDefendantId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientJob", "ClientJob")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("ClientJobId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentRepositoryClientJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "DeliveryMethod")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("DeliveryMethodLid")
                        .HasConstraintName("FKDocumentRepositoryDeliveryMethodLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentType", "DocumentType")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentRepositoryDocumentTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", "FromCheckList")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("FromCheckListId")
                        .HasConstraintName("FKDocumentRepositoryFromCheckListId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "LastVersionDocument")
                        .WithMany("InverseLastVersionDocument")
                        .HasForeignKey("LastVersionDocumentId")
                        .HasConstraintName("RefDocumentRepository161");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPracticeJob", "LawPracticeJob")
                        .WithMany("DocumentRepositories")
                        .HasForeignKey("LawPracticeJobId")
                        .HasConstraintName("FKDocumentRepositoryLawPracticeJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.DocumentRepository", "NextVersionDocument")
                        .WithMany("InverseNextVersionDocument")
                        .HasForeignKey("NextVersionDocumentId")
                        .HasConstraintName("RefDocumentRepository162");

                    b.Navigation("BoundAssignment");

                    b.Navigation("BoundCaseDefendant");

                    b.Navigation("BoundServiceDefendant");

                    b.Navigation("ClientJob");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("DocumentType");

                    b.Navigation("FromCheckList");

                    b.Navigation("LastVersionDocument");

                    b.Navigation("LawPracticeJob");

                    b.Navigation("NextVersionDocument");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentType", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKDocumentTypeClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "DocumentCategory")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("DocumentCategoryLid")
                        .IsRequired()
                        .HasConstraintName("FKDocumentTypeDocumentCategoryLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FKDocumentTypeJobTypeId");

                    b.Navigation("Client");

                    b.Navigation("DocumentCategory");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Garnishee", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("Garnishees")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKGarnisheeClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPractice", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("LawPractices")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FKLawPracticeClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "PracticeType")
                        .WithMany("LawPractices")
                        .HasForeignKey("PracticeTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKPracticeTypeLid");

                    b.Navigation("Client");

                    b.Navigation("PracticeType");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPracticeJob", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("LawPracticeJobs")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FKLawPracticeJobJobTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("LawPracticeJobs")
                        .HasForeignKey("LawPracticeId")
                        .IsRequired()
                        .HasConstraintName("FKLawPracticeJobLawPracticeId");

                    b.Navigation("JobType");

                    b.Navigation("LawPractice");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPracticeUser", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("LawPracticeUsers")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FKLawPracticeUserClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("LawPracticeUsers")
                        .HasForeignKey("LawPracticeId")
                        .IsRequired()
                        .HasConstraintName("FKLawPracticeUserLawPracticeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("LawPracticeUsers")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKLawPracticeUserLoginDetailId");

                    b.Navigation("Client");

                    b.Navigation("LawPractice");

                    b.Navigation("LoginDetail");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetail", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("LoginDetails")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FKLoginDetailClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("LoginDetails")
                        .HasForeignKey("LawPracticeId")
                        .HasConstraintName("FKLoginDetailLawPracticeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LocalCounsel", "LocalCounsel")
                        .WithMany("LoginDetails")
                        .HasForeignKey("LocalCounselId")
                        .HasConstraintName("FKLoginDetailLocalCounselId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "LoginTypeL")
                        .WithMany("LoginDetails")
                        .HasForeignKey("LoginTypeLid")
                        .IsRequired()
                        .HasConstraintName("FKLoginTypeLid");

                    b.Navigation("Client");

                    b.Navigation("LawPractice");

                    b.Navigation("LocalCounsel");

                    b.Navigation("LoginTypeL");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetailJobListing", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.JobType", "JobType")
                        .WithMany("LoginDetailJobListings")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FKLoginDetailJobListingJobTypeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("LoginDetailJobListings")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKLoginDetailJobListingLoginDetailId");

                    b.Navigation("JobType");

                    b.Navigation("LoginDetail");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetailsAccessRole", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ListItem", "AccessField")
                        .WithMany("LoginDetailsAccessRoles")
                        .HasForeignKey("AccessFieldLid")
                        .IsRequired()
                        .HasConstraintName("FKLoginDetailsAccessRoleAccessFieldLid");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("LoginDetailsAccessRoles")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKLoginDetailsAccessRoleLoginDetailId");

                    b.Navigation("AccessField");

                    b.Navigation("LoginDetail");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailSubordinate", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("LogonDetailSubordinateLoginDetails")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKLogonDetailSubordinateLoginDetailId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "SubordinateLoginDetails")
                        .WithMany("LogonDetailSubordinateSubordinateLoginDetails")
                        .HasForeignKey("SubordinateLoginDetailsId")
                        .IsRequired()
                        .HasConstraintName("FKLogonDetailSubordinateSubordinateLoginDetailsId");

                    b.Navigation("LoginDetail");

                    b.Navigation("SubordinateLoginDetails");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailsAssignmentPool", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "ClientAssignmentTask")
                        .WithMany("LogonDetailsAssignmentPools")
                        .HasForeignKey("ClientAssignmentTaskId")
                        .IsRequired()
                        .HasConstraintName("FKLogonDetailsAssignmentPoolClientAssignmentTaskId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LoginDetail", "LoginDetail")
                        .WithMany("LogonDetailsAssignmentPools")
                        .HasForeignKey("LoginDetailId")
                        .IsRequired()
                        .HasConstraintName("FKLogonDetailsAssignmentPoolLoginDetailId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Report", "UseReport")
                        .WithMany("LogonDetailsAssignmentPools")
                        .HasForeignKey("UseReportId")
                        .HasConstraintName("FKLogonDetailsAssignmentPoolUseReportId");

                    b.Navigation("ClientAssignmentTask");

                    b.Navigation("LoginDetail");

                    b.Navigation("UseReport");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailsAssignmentPoolTask", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", "ClientAssignmentTask")
                        .WithMany("LogonDetailsAssignmentPoolTasks")
                        .HasForeignKey("ClientAssignmentTaskId")
                        .IsRequired()
                        .HasConstraintName("FKLogonDetailsAssignmentPoolTaskClientAssignmentTaskId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LogonDetailsAssignmentPool", "LogonDetailsAssignmentPool")
                        .WithMany("LogonDetailsAssignmentPoolTasks")
                        .HasForeignKey("LogonDetailsAssignmentPoolId")
                        .IsRequired()
                        .HasConstraintName("FKLogonDetailsAssignmentPoolTaskLogonDetailsAssignmentPoolId");

                    b.Navigation("ClientAssignmentTask");

                    b.Navigation("LogonDetailsAssignmentPool");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.MergeDocumentCustom", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.MergeDocument", "MergeDocument")
                        .WithMany("MergeDocumentCustoms")
                        .HasForeignKey("MergeDocumentId")
                        .IsRequired()
                        .HasConstraintName("FKMergeDocumentCustomMergeDocumentId");

                    b.Navigation("MergeDocument");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Report", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("Reports")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FKReportClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJob", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Report", "Report")
                        .WithMany("ReportJobs")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FKReportJobReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJobParameter", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ReportJob", "ReportJob")
                        .WithMany("ReportJobParameters")
                        .HasForeignKey("ReportJobId")
                        .IsRequired()
                        .HasConstraintName("FKReportJobParameterReportJobId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.ReportParameter", "ReportParameter")
                        .WithMany("ReportJobParameters")
                        .HasForeignKey("ReportParameterId")
                        .IsRequired()
                        .HasConstraintName("FKReportJobParameterReportParameterId");

                    b.Navigation("ReportJob");

                    b.Navigation("ReportParameter");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJobSchedule", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Report", "Report")
                        .WithMany("ReportJobSchedules")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FKReportJobScheduleReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportMapping", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Client", "Client")
                        .WithMany("ReportMappings")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FKReportMappingClientId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LawPractice", "LawPractice")
                        .WithMany("ReportMappings")
                        .HasForeignKey("LawPracticeId")
                        .HasConstraintName("FKReportMappingLawPracticeId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.LocalCounsel", "LocalCounsel")
                        .WithMany("ReportMappings")
                        .HasForeignKey("LocalCounselId")
                        .HasConstraintName("FKReportMappingLocalCounselId");

                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Report", "Report")
                        .WithMany("ReportMappings")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FKReportMappingReportId");

                    b.Navigation("Client");

                    b.Navigation("LawPractice");

                    b.Navigation("LocalCounsel");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportParameter", b =>
                {
                    b.HasOne("CMSSERVICE.DOMAIN.Entities.Report", "Report")
                        .WithMany("ReportParameters")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FKReportParameterReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.BkrDistrict", b =>
                {
                    b.Navigation("CaseBkrs");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseAuto", b =>
                {
                    b.Navigation("CaseAutoBuyerInfos");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseBkr", b =>
                {
                    b.Navigation("BkrCaseSummaries");

                    b.Navigation("BkrConditionalOrders");

                    b.Navigation("BkrFinInstallments");

                    b.Navigation("BkrFinInterestRates");

                    b.Navigation("BkrFinMissedPayments");

                    b.Navigation("BkrFinOtherCosts");

                    b.Navigation("BkrFinancials");

                    b.Navigation("BkrJournals");

                    b.Navigation("BkrLoanModifications");

                    b.Navigation("BkrMfrs");

                    b.Navigation("BkrPaymentChanges");

                    b.Navigation("BkrProperties");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCol", b =>
                {
                    b.Navigation("CaseColTransactions");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCounty", b =>
                {
                    b.Navigation("CaseCourts");

                    b.Navigation("CaseEvictions");

                    b.Navigation("CaseFcls");

                    b.Navigation("CaseMasters");

                    b.Navigation("CaseReplevinCountyFileds");

                    b.Navigation("CaseReplevinDebtorCounties");

                    b.Navigation("CaseWrits");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseCourt", b =>
                {
                    b.Navigation("CaseJudges");

                    b.Navigation("CaseWrits");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseDistrict", b =>
                {
                    b.Navigation("CaseCourts");

                    b.Navigation("CaseEvictions");

                    b.Navigation("CaseReplevins");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseEviction", b =>
                {
                    b.Navigation("CaseEvictionJournals");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseFcl", b =>
                {
                    b.Navigation("CaseSales");

                    b.Navigation("CaseTitles");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendant", b =>
                {
                    b.Navigation("CaseColDefendantBankInfos");

                    b.Navigation("CaseColDefendantCardInfos");

                    b.Navigation("CaseJobDefendantAdditionalAddresses");

                    b.Navigation("CaseJobDefendantByVirtueOfs");

                    b.Navigation("CaseJobDefendantSearchHistories");

                    b.Navigation("CaseJobDefendantServices");

                    b.Navigation("ClientAssignments");

                    b.Navigation("DefendantAddresses");

                    b.Navigation("DocumentMailOutHistories");

                    b.Navigation("DocumentRepositories");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantAtty", b =>
                {
                    b.Navigation("CaseJobDefendants");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJobDefendantService", b =>
                {
                    b.Navigation("DocumentRepositories");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseJudge", b =>
                {
                    b.Navigation("CaseEvictions");

                    b.Navigation("CaseFcls");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseMaster", b =>
                {
                    b.Navigation("CaseCommentWhiteboards");

                    b.Navigation("CaseComments");

                    b.Navigation("ClientJobs");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSale", b =>
                {
                    b.Navigation("CaseSalePubCosts");

                    b.Navigation("CaseSalePubDates");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseState", b =>
                {
                    b.Navigation("CaseCounties");

                    b.Navigation("CaseDistricts");

                    b.Navigation("CaseFcls");

                    b.Navigation("CaseReplevins");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseSubpoena", b =>
                {
                    b.Navigation("CaseSubpoenaOrderInfos");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitle", b =>
                {
                    b.Navigation("CaseTitleAssignments");

                    b.Navigation("CaseTitleDlinqTaxes");

                    b.Navigation("CaseTitleFileAssigns");

                    b.Navigation("CaseTitleIrstaxLiens");

                    b.Navigation("CaseTitleJudgmentLiens");

                    b.Navigation("CaseTitleModParagraphs");

                    b.Navigation("CaseTitleMortgTaxLiens");

                    b.Navigation("CaseTitleMortgWithAssignments");

                    b.Navigation("CaseTitleReRecordeds");

                    b.Navigation("CaseTitleSpecialCounts");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleAssignment", b =>
                {
                    b.Navigation("CaseTitleAssignmentItems");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleSpecialCountTemplate", b =>
                {
                    b.Navigation("CaseTitleSpecialCounts");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseTitleUnderWriter", b =>
                {
                    b.Navigation("CaseTitles");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.CaseWrit", b =>
                {
                    b.Navigation("CaseWritFinancials");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Client", b =>
                {
                    b.Navigation("CaseMasters");

                    b.Navigation("ClientAssignmentTasks");

                    b.Navigation("ClientFacilities");

                    b.Navigation("ClientJobListings");

                    b.Navigation("ClientLawPractices");

                    b.Navigation("ClientStateLocations");

                    b.Navigation("DocumentTypes");

                    b.Navigation("Garnishees");

                    b.Navigation("LawPracticeUsers");

                    b.Navigation("LawPractices");

                    b.Navigation("LoginDetails");

                    b.Navigation("ReportMappings");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignment", b =>
                {
                    b.Navigation("CaseColLastAssignments");

                    b.Navigation("CaseColNextAssignments");

                    b.Navigation("CaseJobDefendantSearchHistories");

                    b.Navigation("CaseJobDefendantServices");

                    b.Navigation("ClientAssignmentCheckListVrs");

                    b.Navigation("ClientAssignmentHoldClientAssignmentParents");

                    b.Navigation("ClientAssignmentHoldClientAssignments");

                    b.Navigation("ClientAssignmentHoldHoldingAssignments");

                    b.Navigation("ClientAssignmentJournals");

                    b.Navigation("ClientAssignmentReProHistories");

                    b.Navigation("ClientAssignmentScheduledClientAssignments");

                    b.Navigation("ClientAssignmentScheduledFromClientAssignments");

                    b.Navigation("ClientJobActivities");

                    b.Navigation("DocumentMailOutHistories");

                    b.Navigation("DocumentRepositories");

                    b.Navigation("InverseChainCompletedAssignment");

                    b.Navigation("InverseParentAssignment");

                    b.Navigation("InverseStartedByAssignment");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTask", b =>
                {
                    b.Navigation("ClientAssignmentTaskCheckLists");

                    b.Navigation("ClientAssignmentTaskScheduledClientAssignmentTasks");

                    b.Navigation("ClientAssignmentTaskScheduledStartClientAssignmentTasks");

                    b.Navigation("ClientAssignments");

                    b.Navigation("InverseParentTask");

                    b.Navigation("LogonDetailsAssignmentPoolTasks");

                    b.Navigation("LogonDetailsAssignmentPools");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckList", b =>
                {
                    b.Navigation("ClientAssignmentCheckListCrs");

                    b.Navigation("ClientAssignmentCheckListVrs");

                    b.Navigation("ClientAssignmentTaskCheckListVrs");

                    b.Navigation("ClientAssignmentTaskRules");

                    b.Navigation("DocumentRepositories");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskCheckListCr", b =>
                {
                    b.Navigation("ClientAssignmentCheckListCrs");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientAssignmentTaskScheduled", b =>
                {
                    b.Navigation("ClientAssignmentScheduleds");

                    b.Navigation("ClientAssignmentTaskRecurrences");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ClientJob", b =>
                {
                    b.Navigation("CaseAutos");

                    b.Navigation("CaseBkrs");

                    b.Navigation("CaseCols");

                    b.Navigation("CaseCommentWhiteboards");

                    b.Navigation("CaseComments");

                    b.Navigation("CaseEvictions");

                    b.Navigation("CaseFcls");

                    b.Navigation("CaseJobDefendants");

                    b.Navigation("CaseReplevins");

                    b.Navigation("CaseSubpoenas");

                    b.Navigation("CaseWrits");

                    b.Navigation("CientJobLogs");

                    b.Navigation("ClientAssignmentScheduleds");

                    b.Navigation("ClientAssignments");

                    b.Navigation("ClientJobActivities");

                    b.Navigation("ClientJobLegals");

                    b.Navigation("DocumentMailOutHistories");

                    b.Navigation("DocumentRepositories");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentRepository", b =>
                {
                    b.Navigation("CaseJobDefendants");

                    b.Navigation("CaseTitles");

                    b.Navigation("ClientAssignmentCompleteDocumentRepositories");

                    b.Navigation("ClientAssignmentHolds");

                    b.Navigation("ClientAssignmentReProHistories");

                    b.Navigation("ClientAssignmentStartedDocumentRepositories");

                    b.Navigation("DocumentMailOutHistories");

                    b.Navigation("DocumentNotes");

                    b.Navigation("InverseLastVersionDocument");

                    b.Navigation("InverseNextVersionDocument");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.DocumentType", b =>
                {
                    b.Navigation("CaseJobDefendantServices");

                    b.Navigation("ClientAssignmentTasks");

                    b.Navigation("DocumentMailOutHistories");

                    b.Navigation("DocumentRepositories");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Garnishee", b =>
                {
                    b.Navigation("CaseWrits");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.JobType", b =>
                {
                    b.Navigation("ClientAssignmentTasks");

                    b.Navigation("ClientJobListings");

                    b.Navigation("ClientJobs");

                    b.Navigation("ClientLawPracticeJobTypes");

                    b.Navigation("DocumentTypes");

                    b.Navigation("LawPracticeJobs");

                    b.Navigation("LoginDetailJobListings");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPractice", b =>
                {
                    b.Navigation("CaseSubpoenas");

                    b.Navigation("ClientAssignmentHolds");

                    b.Navigation("ClientJobs");

                    b.Navigation("ClientLawPractices");

                    b.Navigation("LawPracticeJobs");

                    b.Navigation("LawPracticeUsers");

                    b.Navigation("LoginDetails");

                    b.Navigation("ReportMappings");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPracticeJob", b =>
                {
                    b.Navigation("DocumentRepositories");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LawPracticeUser", b =>
                {
                    b.Navigation("CaseReplevinAssignedAttyNavigations");

                    b.Navigation("CaseReplevinAssignedParaNavigations");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ListItem", b =>
                {
                    b.Navigation("BkrfinOtherCosts");

                    b.Navigation("CaseAutoAssignedCsrls");

                    b.Navigation("CaseAutoCaseAutoStatusLs");

                    b.Navigation("CaseAutoClosedReasonLs");

                    b.Navigation("CaseAutoVehicleStatusLs");

                    b.Navigation("CaseBkrBkrcircuitLs");

                    b.Navigation("CaseBkrBkrsolls");

                    b.Navigation("CaseBkrCaseBkrclientInvestorLs");

                    b.Navigation("CaseBkrCaseBkrclientInvestorTypeLs");

                    b.Navigation("CaseBkrCaseBkrstatusLs");

                    b.Navigation("CaseBkrCaseBkrtypeLs");

                    b.Navigation("CaseBkrClosedReasonLs");

                    b.Navigation("CaseColCaseColcloseReasonLs");

                    b.Navigation("CaseColCaseColstatusLs");

                    b.Navigation("CaseColDefendantBankInfos");

                    b.Navigation("CaseColDefendantCardInfos");

                    b.Navigation("CaseCommentWhiteboards");

                    b.Navigation("CaseComments");

                    b.Navigation("CaseCourts");

                    b.Navigation("CaseEvictionCircuitLs");

                    b.Navigation("CaseEvictionClosedReasonLs");

                    b.Navigation("CaseEvictionDivisionLs");

                    b.Navigation("CaseEvictionEvictionStatusLs");

                    b.Navigation("CaseEvictionEvictionTypeLs");

                    b.Navigation("CaseFclCaseFclcaseTypeLs");

                    b.Navigation("CaseFclCaseFclclientInvestorTypeLs");

                    b.Navigation("CaseFclCaseFclclosedReasonLs");

                    b.Navigation("CaseFclCaseFclpropertyTypeLs");

                    b.Navigation("CaseFclCaseFclstatusLs");

                    b.Navigation("CaseJobDefendantByVirtueOfs");

                    b.Navigation("CaseJobDefendantPartyTypeLs");

                    b.Navigation("CaseJobDefendantRequestorOrganizationLs");

                    b.Navigation("CaseJobDefendantSearchHistories");

                    b.Navigation("CaseJobDefendantServiceServiceStatusLs");

                    b.Navigation("CaseJobDefendantServiceServiceTypeLs");

                    b.Navigation("CaseJobDefendantServiceTypeLs");

                    b.Navigation("CaseReplevinCaseReplevinStatusLs");

                    b.Navigation("CaseReplevinCaseReplevinTypeLs");

                    b.Navigation("CaseReplevinClosedReasonLs");

                    b.Navigation("CaseReplevinDefaultReasonLs");

                    b.Navigation("CaseReplevinInvestorTypeLs");

                    b.Navigation("CaseReplevinOccupancyStatusLs");

                    b.Navigation("CaseSaleCancelReasonLs");

                    b.Navigation("CaseSaleCaseSaleStatusLs");

                    b.Navigation("CaseSaleRescheduleReasonLs");

                    b.Navigation("CaseSubpoenaCaseSubpoenaClosedReasonLs");

                    b.Navigation("CaseSubpoenaCaseSubpoenaDocTransmissionMethodLs");

                    b.Navigation("CaseSubpoenaCaseSubpoenaPcidataIncludedLs");

                    b.Navigation("CaseSubpoenaCaseSubpoenaStatusLs");

                    b.Navigation("CaseSubpoenaCaseSubpoenaSubTypeLs");

                    b.Navigation("CaseSubpoenaCaseSubpoenaTypeLs");

                    b.Navigation("CaseSubpoenaOrderInfoInformationRequestedLs");

                    b.Navigation("CaseSubpoenaOrderInfoInformationRequestedStatusLs");

                    b.Navigation("CaseSubpoenaOrderInfoIsOrderAskingForRecordsLs");

                    b.Navigation("CaseTitleCaseTitleStatusLs");

                    b.Navigation("CaseTitleClientInvestorTypeLs");

                    b.Navigation("CaseTitleMortgTaxLiens");

                    b.Navigation("CaseTitleMortgagePositionLs");

                    b.Navigation("CaseTitleSpecialCountTemplates");

                    b.Navigation("CaseTitleTitleCompanyLs");

                    b.Navigation("CaseTitleTypeOfMortLs");

                    b.Navigation("CaseTitleUnderwriterLs");

                    b.Navigation("CaseWritAdditionalDocumentationLs");

                    b.Navigation("CaseWritCaseDetailLs");

                    b.Navigation("CaseWritCaseTypeLs");

                    b.Navigation("CaseWritCaseWritStatusLs");

                    b.Navigation("CaseWritClosedReasonLs");

                    b.Navigation("CaseWritFinancialAcctStatusLs");

                    b.Navigation("CaseWritFinancialAcctStylingLs");

                    b.Navigation("CaseWritRtgLs");

                    b.Navigation("ClientAssignmentHolds");

                    b.Navigation("ClientAssignmentTaskCheckLists");

                    b.Navigation("ClientFacilities");

                    b.Navigation("ClientJobLegals");

                    b.Navigation("Clients");

                    b.Navigation("DocumentMailOutHistoryMailServiceTypeLs");

                    b.Navigation("DocumentMailOutHistoryMailVendorLs");

                    b.Navigation("DocumentRepositories");

                    b.Navigation("DocumentTypes");

                    b.Navigation("LawPractices");

                    b.Navigation("LoginDetails");

                    b.Navigation("LoginDetailsAccessRoles");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LocalCounsel", b =>
                {
                    b.Navigation("CaseReplevins");

                    b.Navigation("ClientJobs");

                    b.Navigation("LoginDetails");

                    b.Navigation("ReportMappings");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetail", b =>
                {
                    b.Navigation("CaseEvictionJournals");

                    b.Navigation("CaseReplevins");

                    b.Navigation("ClientAssignmentAssignedToNavigations");

                    b.Navigation("ClientAssignmentChainCompletedByNavigations");

                    b.Navigation("ClientAssignmentCompletedByNavigations");

                    b.Navigation("ClientAssignmentCreatedByNavigations");

                    b.Navigation("ClientAssignmentHoldApprovedBies");

                    b.Navigation("ClientAssignmentHoldDeniedBies");

                    b.Navigation("ClientAssignmentJournals");

                    b.Navigation("ClientAssignmentLastAccessByNavigations");

                    b.Navigation("ClientAssignmentReProHistoryApprovedByNavigations");

                    b.Navigation("ClientAssignmentReProHistoryReprojectedByNavigations");

                    b.Navigation("ClientAssignmentReprojectedByNavigations");

                    b.Navigation("ClientAssignmentScheduleds");

                    b.Navigation("ClientAssignmentUpdatedByNavigations");

                    b.Navigation("ClientAssignmentVoidedByNavigations");

                    b.Navigation("ClientJobLegals");

                    b.Navigation("DocumentNotes");

                    b.Navigation("LawPracticeUsers");

                    b.Navigation("LoginDetailJobListings");

                    b.Navigation("LoginDetailsAccessRoles");

                    b.Navigation("LogonDetailSubordinateLoginDetails");

                    b.Navigation("LogonDetailSubordinateSubordinateLoginDetails");

                    b.Navigation("LogonDetailsAssignmentPools");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LoginDetailJobListing", b =>
                {
                    b.Navigation("CaseSubpoenaCertificationMsrspecialists");

                    b.Navigation("CaseSubpoenaServicingMsrspecialists");

                    b.Navigation("CaseSubpoenaTriageMsrspecialists");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.LogonDetailsAssignmentPool", b =>
                {
                    b.Navigation("LogonDetailsAssignmentPoolTasks");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.MergeDocument", b =>
                {
                    b.Navigation("ClientAssignmentTasks");

                    b.Navigation("MergeDocumentCustoms");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.Report", b =>
                {
                    b.Navigation("LogonDetailsAssignmentPools");

                    b.Navigation("ReportJobSchedules");

                    b.Navigation("ReportJobs");

                    b.Navigation("ReportMappings");

                    b.Navigation("ReportParameters");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportJob", b =>
                {
                    b.Navigation("ReportJobParameters");
                });

            modelBuilder.Entity("CMSSERVICE.DOMAIN.Entities.ReportParameter", b =>
                {
                    b.Navigation("ReportJobParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
